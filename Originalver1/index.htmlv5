<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Catalyst DApp — Full Dashboard v5</title>

<!-- Ethers v6 (UMD) -->
<script src="https://cdn.jsdelivr.net/npm/ethers@6.13.2/dist/ethers.umd.min.js"></script>

<style>
  :root { --bg:#0f1220; --card:#171a2b; --muted:#9aa3b2; --text:#e7ecf4; --acc:#6ee7ff; }
  * { box-sizing:border-box; }
  body { margin:0; font-family:system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial; background:var(--bg); color:var(--text); }
  header { padding:16px 20px; border-bottom:1px solid #20243a; display:flex; gap:12px; align-items:center; flex-wrap:wrap; }
  header h1 { font-size:18px; margin:0; opacity:.95; }
  .pill { background:var(--card); padding:8px 10px; border-radius:10px; border:1px solid #232744; display:flex; gap:8px; align-items:center; }
  input, select, button, textarea { background:#0c0f1c; color:var(--text); border:1px solid #27304a; border-radius:10px; padding:10px 12px; outline:none; }
  input, select, textarea { width:100%; }
  button { cursor:pointer; font-weight:600; }
  button.primary { background:#132a39; border-color:#1e3a53; }
  button:disabled { opacity:.6; cursor:not-allowed; }
  main { max-width:1200px; margin:20px auto; padding:0 16px 60px; }
  .grid { display:grid; gap:16px; grid-template-columns:repeat(12,1fr); }
  .card { grid-column:span 12; background:var(--card); border:1px solid #232744; border-radius:16px; padding:16px; }
  @media(min-width:1000px){
    .span7 { grid-column:span 7; }
    .span5 { grid-column:span 5; }
    .span6 { grid-column:span 6; }
    .span4 { grid-column:span 4; }
  }
  .row { display:grid; gap:10px; grid-template-columns:1fr 1fr; }
  .row3 { display:grid; gap:10px; grid-template-columns:1fr 1fr 1fr; }
  .label { font-size:12px; color:var(--muted); margin-bottom:6px; }
  .muted { color:var(--muted); }
  .hr { height:1px; background:#232744; margin:14px 0; }
  details { border:1px dashed #2a3154; border-radius:12px; padding:10px 12px; }
  summary { cursor:pointer; font-weight:600; }
  code.inline { background:#0c0f1c; padding:2px 6px; border-radius:6px; border:1px solid #27304a; }
  .tabbar { display:flex; gap:6px; flex-wrap:wrap; margin-bottom:10px; }
  .tabbar button { background:transparent; border:1px solid #27304a; padding:8px 10px; border-radius:10px; }
  .tabbar button.active { background:#132a39; border-color:#1e3a53; }
  .warn { color:#ffd166; }
  .ok { color:#86efac; }
  .err { color:#ff8a8a; }
  .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace; }
  .kv { display:grid; grid-template-columns: 220px 1fr; gap:8px; }
  .flex { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
  table { width:100%; border-collapse:collapse; }
  th, td { padding:6px 8px; border-bottom:1px solid #22273a; }
</style>
</head>
<body>
<header>
  <h1>⚗️ Catalyst DApp</h1>

  <div class="pill">
    <span class="muted">RPC (read)</span>
    <input id="rpcUrl" placeholder="(optional) https://mainnet.infura.io/v3/..." style="min-width:320px" />
    <button id="saveRpc" class="primary">Use RPC</button>
  </div>

  <div class="pill">
    <span class="muted">Contract</span>
    <input id="contractAddress" placeholder="0x... (CatalystNFTStakingUpgradeable)" style="min-width:320px" />
    <button class="primary" id="saveContractBtn">Save</button>
  </div>

  <div class="pill">
    <span id="acct" class="mono muted">Not connected</span>
    <button id="walletBtn" class="primary">Connect</button>
  </div>
</header>

<main>
  <div class="grid">
    <section class="card span7">
      <div class="tabbar">
        <button data-tab="stake" class="active">Stake</button>
        <button data-tab="bluechip">Blue-Chip</button>
        <button data-tab="governance">Governance</button>
        <button data-tab="guardians">Guardians</button>
        <button data-tab="admin">Admin</button>
        <button data-tab="views">Views</button>
        <button data-tab="info">Info</button>
      </div>

      <!-- STAKE -->
      <div class="tab" id="tab-stake" style="display:block">
        <h3 style="margin-top:0">Custodial Staking</h3>
        <div class="row">
          <div>
            <div class="label">Collection (ERC-721)</div>
            <input id="colStake" placeholder="0x...">
          </div>
          <div>
            <div class="label">Token ID</div>
            <input id="tidStake" type="number" placeholder="e.g. 123">
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div>
            <div class="label">Stake Type</div>
            <select id="permanent">
              <option value="false">Term</option>
              <option value="true">Permanent</option>
            </select>
          </div>
          <div>
            <div class="label">Approve NFT (setApprovalForAll)</div>
            <button id="btnApprove721">Approve</button>
          </div>
        </div>

        <div class="flex" style="margin-top:10px">
          <button class="primary" id="btnStake">Stake</button>
          <button id="btnHarvestOne">Harvest</button>
          <button id="btnUnstake">Unstake</button>
          <button id="btnViewPending">View Pending</button>
          <span id="pendingView" class="mono muted">—</span>
        </div>

        <div class="hr"></div>

        <details>
          <summary>Batch stake (≤50)</summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Collection</div>
              <input id="colBatch" placeholder="0x...">
            </div>
            <div>
              <div class="label">Token IDs (comma-separated)</div>
              <input id="tidsBatch" placeholder="1,2,3">
            </div>
          </div>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Stake Type</div>
              <select id="permanentBatch">
                <option value="false">Term</option>
                <option value="true">Permanent</option>
              </select>
            </div>
            <div>
              <div class="label">Approve</div>
              <button id="btnApprove721Batch">Approve Batch</button>
            </div>
          </div>
          <div style="margin-top:10px">
            <button class="primary" id="btnBatchStake">Batch Stake</button>
          </div>
        </details>

        <div class="hr"></div>

        <h3>Register Collection</h3>
        <div class="row">
          <div>
            <div class="label">Collection</div>
            <input id="colRegister" placeholder="0x...">
          </div>
          <div>
            <div class="label">Declared Max Supply (≤ 20,000)</div>
            <input id="declaredSupply" type="number" placeholder="e.g. 10000">
          </div>
        </div>
        <div style="margin-top:10px">
          <button id="btnRegister" class="primary">Register</button>
        </div>
      </div>

      <!-- BLUECHIP -->
      <div class="tab" id="tab-bluechip" style="display:none">
        <h3 style="margin-top:0">Blue-Chip (Non-custodial)</h3>
        <div class="row">
          <div>
            <div class="label">Enroll Blue-Chip (one-time per wallet)</div>
            <button class="primary" id="btnEnrollBlue">Enroll</button>
          </div>
          <div>
            <div class="label">Harvest Blue-Chip — Collection</div>
            <input id="colBlueHarvest" placeholder="0x...">
          </div>
        </div>
        <div class="flex" style="margin-top:10px">
          <button id="btnHarvestBlue">Harvest Blue-Chip</button>
        </div>

        <div class="hr"></div>

        <details>
          <summary>Admin: Flag / Unflag Blue-Chip Collection</summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Collection</div>
              <input id="colFlagBlue" placeholder="0x...">
            </div>
            <div>
              <div class="label">Status</div>
              <select id="isBlueFlag">
                <option value="true">Flag as Blue-Chip</option>
                <option value="false">Remove Blue-Chip</option>
              </select>
            </div>
          </div>
          <div style="margin-top:10px">
            <button id="btnSetBlue" class="primary">Set Blue-Chip</button>
          </div>
        </details>
      </div>

      <!-- GOVERNANCE -->
      <div class="tab" id="tab-governance" style="display:none">
        <h3 style="margin-top:0">Governance</h3>
        <div class="row">
          <div>
            <div class="label">Proposal Type</div>
            <select id="pType">
              <option value="0">BASE_REWARD</option>
              <option value="1">HARVEST_FEE</option>
              <option value="2">UNSTAKE_FEE</option>
              <option value="3">REGISTRATION_FEE_FALLBACK</option>
              <option value="4">VOTING_PARAM</option>
              <option value="5">TIER_UPGRADE</option>
            </select>
          </div>
          <div>
            <div class="label">Param Target (for VOTING_PARAM)</div>
            <input id="paramTarget" type="number" value="0">
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div>
            <div class="label">New Value (uint256)</div>
            <input id="newValue" type="number" placeholder="e.g. 1000">
          </div>
          <div>
            <div class="label">Collection Context (optional)</div>
            <input id="collCtx" placeholder="0x... or 0x0000...">
          </div>
        </div>
        <div style="margin-top:10px">
          <button class="primary" id="btnPropose">Create Proposal</button>
        </div>

        <div class="hr"></div>

        <div class="row">
          <div>
            <div class="label">Proposal ID (bytes32)</div>
            <input id="propId" placeholder="0x...">
          </div>
          <div>
            <div class="label">—</div>
            <button id="btnVote">Vote</button>
          </div>
        </div>
        <div style="margin-top:10px">
          <button id="btnExecute">Execute</button>
        </div>
      </div>

      <!-- GUARDIANS -->
      <div class="tab" id="tab-guardians" style="display:none">
        <h3 style="margin-top:0">Guardian Councils</h3>

        <details open>
          <summary><strong>Deployer Council (7:5)</strong></summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Proposed New Deployer</div>
              <input id="newDeployer" placeholder="0x...">
            </div>
            <div>
              <div class="label">Actions</div>
              <div class="flex">
                <button class="primary" id="btnPropDep">Propose</button>
                <button id="btnApproveDep">Approve</button>
                <button id="btnExecDep">Execute</button>
              </div>
            </div>
          </div>
        </details>

        <div class="hr"></div>

        <details open>
          <summary><strong>Admin Council (7:5)</strong></summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Proposed New Admin</div>
              <input id="newAdmin" placeholder="0x...">
            </div>
            <div>
              <div class="label">Actions</div>
              <div class="flex">
                <button class="primary" id="btnPropAdm">Propose</button>
                <button id="btnApproveAdm">Approve</button>
                <button id="btnExecAdm">Execute</button>
              </div>
            </div>
          </div>
        </details>

        <div class="hr"></div>

        <details>
          <summary>Advanced: Set/Replace Guardians (Admin)</summary>
          <div class="row3" style="margin-top:10px">
            <div>
              <div class="label">Deployer idx (0–6)</div>
              <input id="depIdx" type="number" placeholder="0">
            </div>
            <div>
              <div class="label">Guardian Address</div>
              <input id="depGuardian" placeholder="0x...">
            </div>
            <div>
              <div class="label">—</div>
              <button id="btnSetDepGuardian" class="primary">Set Deployer Guardian</button>
            </div>
          </div>
          <div class="row3" style="margin-top:10px">
            <div>
              <div class="label">Admin idx (0–6)</div>
              <input id="admIdx" type="number" placeholder="0">
            </div>
            <div>
              <div class="label">Guardian Address</div>
              <input id="admGuardian" placeholder="0x...">
            </div>
            <div>
              <div class="label">—</div>
              <button id="btnSetAdmGuardian" class="primary">Set Admin Guardian</button>
            </div>
          </div>
        </details>
      </div>

      <!-- ADMIN -->
      <div class="tab" id="tab-admin" style="display:none">
        <h3 style="margin-top:0">Admin Controls</h3>
        <div class="flex">
          <button id="btnPause">Pause</button>
          <button id="btnUnpause">Unpause</button>
        </div>

        <div class="hr"></div>

        <h4>Treasury</h4>
        <div class="row">
          <div>
            <div class="label">Withdraw → Address</div>
            <input id="toTreasury" placeholder="0x...">
          </div>
          <div>
            <div class="label">Amount (wei)</div>
            <input id="amtTreasury" type="number" placeholder="1000000000000000000">
          </div>
        </div>
        <div style="margin-top:10px">
          <button id="btnWithdraw" class="primary">Withdraw Treasury</button>
        </div>
      </div>

      <!-- VIEWS -->
      <div class="tab" id="tab-views" style="display:none">
        <h3 style="margin-top:0">Read-Only Helpers</h3>
        <div class="row">
          <div>
            <div class="label">Pending Rewards: Collection</div>
            <input id="vCol" placeholder="0x...">
          </div>
          <div>
            <div class="label">Owner</div>
            <input id="vOwner" placeholder="0x... (defaults to your address)">
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div>
            <div class="label">Token ID</div>
            <input id="vTokenId" type="number" placeholder="123">
          </div>
          <div>
            <div class="label">—</div>
            <button id="btnViewPending2" class="primary">View Pending</button>
          </div>
        </div>
        <div style="margin-top:8px" class="mono muted" id="pendingOut">—</div>
      </div>

      <!-- INFO -->
      <div class="tab" id="tab-info" style="display:none">
        <h3 style="margin-top:0">User & Collection Info</h3>
        <div class="row">
          <div>
            <div class="label">User Address</div>
            <input id="infoUser" placeholder="0x... (leave blank for your wallet)">
          </div>
          <div>
            <div class="label">Collection Address</div>
            <input id="infoCol" placeholder="0x...">
          </div>
        </div>

        <div class="flex" style="margin-top:10px">
          <button id="btnUserInfo" class="primary">Get User Info</button>
          <button id="btnColInfo">Get Collection Info</button>
          <button id="btnListCollections">List Registered Collections</button>
        </div>

        <div class="hr"></div>

        <div class="kv">
          <div class="muted">User Address</div><div id="ui_address">—</div>
          <div class="muted">Collection</div><div id="ui_collection">—</div>
          <div class="muted">Pending Rewards (tid)</div><div id="ui_pending">—</div>
          <div class="muted">Collection Index</div><div id="ci_index">—</div>
          <div class="muted">Is Blue-Chip?</div><div id="ci_blue">—</div>
          <div class="muted">Registered Collections (count)</div><div id="ci_count">—</div>
        </div>

        <div class="hr"></div>
        <div>
          <h4>Registered Collections</h4>
          <div style="max-height:220px; overflow:auto">
            <table id="registeredTable">
              <thead><tr><th>#</th><th>Address</th></tr></thead>
              <tbody></tbody>
            </table>
          </div>
        </div>
      </div>
    </section>

    <!-- RIGHT: Stats + Console -->
    <section class="card span5">
      <div class="flex" style="justify-content:space-between; align-items:center">
        <h3 style="margin:0">Protocol Stats</h3>
        <div class="flex">
          <button id="btnRefresh" class="primary">Refresh</button>
          <label class="muted" style="display:flex; align-items:center; gap:6px">
            <input type="checkbox" id="autoRefresh" />
            Auto
          </label>
        </div>
      </div>

      <div id="stats" class="mono" style="margin-top:12px">
        <div class="kv">
          <div>totalAll</div><div id="st_totalAll">—</div>
          <div>totalTerm</div><div id="st_totalTerm">—</div>
          <div>totalPermanent</div><div id="st_totalPermanent">—</div>
          <div>remainingGlobal</div><div id="st_remainingGlobal">—</div>
          <div>remainingTerm</div><div id="st_remainingTerm">—</div>
          <div>remainingPermanent</div><div id="st_remainingPermanent">—</div>
          <div>treasuryBalance</div><div id="st_treasury">—</div>
          <div>deployerAddress</div><div id="st_deployer">—</div>
          <div>paused</div><div id="st_paused">—</div>
        </div>
      </div>

      <div class="hr"></div>

      <h3 style="margin:0 0 6px 0">Console</h3>
      <div id="log" class="mono" style="font-size:12px; white-space:pre-wrap; min-height:220px"></div>
    </section>
  </div>
</main>

<script>
/* =========================
   CONFIG / STATE
   ========================= */
const ABI_URL = "../abi/CatalystNFTStakingUpgradeable.json"; // adjust if needed
const DEFAULT_CONTRACT = ""; // optional default address
const DEFAULT_RPC = ""; // optional default RPC

const ERC721_ABI = [
  "function setApprovalForAll(address operator, bool approved)",
  "function isApprovedForAll(address owner, address operator) view returns (bool)",
  "function balanceOf(address owner) view returns (uint256)"
];

// State
let READ_PROVIDER = null;
let WALLET_PROVIDER = null;
let SIGNER = null;
let USER_ADDR = null;

let ABI = null;
let READ_CONTRACT = null;
let WRITE_CONTRACT = null;
let CONTRACT_ADDR = "";

let refreshTimer = null;

/* DOM helpers */
const $ = id => document.getElementById(id);
const log = (msg, cls="") => {
  const el = $("log");
  const d = document.createElement("div");
  if (cls) d.className = cls;
  d.textContent = `[${new Date().toLocaleTimeString()}] ${msg}`;
  el.prepend(d);
};
const formatAddr = a => (a ? (a.slice(0,6) + "…" + a.slice(-4)) : "—");

/* =========================
   ABI LOADER
   ========================= */
async function loadABI() {
  if (ABI) return ABI;
  const res = await fetch(ABI_URL, { cache: "no-store" });
  if (!res.ok) throw new Error(`Failed to load ABI from ${ABI_URL}`);
  const json = await res.json();
  ABI = Array.isArray(json) ? json : (json.abi || json.ABI || json.default || json);
  if (!Array.isArray(ABI)) throw new Error("ABI JSON not array");
  log(`ABI loaded (${ABI.length} entries)`, "ok");
  return ABI;
}

/* =========================
   PROVIDERS
   ========================= */
async function setupReadProvider(customRpc) {
  try {
    READ_PROVIDER = customRpc ? new ethers.JsonRpcProvider(customRpc) : ethers.getDefaultProvider();
    log(`Read provider ready${customRpc ? " (custom RPC)" : ""}`, "ok");
  } catch (e) {
    log(`Read provider error: ${e.message}`, "err");
    READ_PROVIDER = null;
  }
}

async function connectWallet() {
  if (!window.ethereum) throw new Error("No injected wallet");
  WALLET_PROVIDER = new ethers.BrowserProvider(window.ethereum);
  await WALLET_PROVIDER.send("eth_requestAccounts", []);
  SIGNER = await WALLET_PROVIDER.getSigner();
  USER_ADDR = await SIGNER.getAddress();
  $("acct").textContent = formatAddr(USER_ADDR);
  $("walletBtn").textContent = "Disconnect";
  log(`Wallet connected: ${USER_ADDR}`, "ok");
}

/* Disconnect helper */
function disconnectWallet() {
  USER_ADDR = null;
  SIGNER = null;
  WRITE_CONTRACT = null;
  $("acct").textContent = "Not connected";
  $("walletBtn").textContent = "Connect";
  log("Wallet disconnected", "warn");
}

/* =========================
   CONTRACT INIT
   ========================= */
function saveContractAddress(addr) {
  localStorage.setItem("catalyst_contract", addr);
  $("contractAddress").value = addr;
  CONTRACT_ADDR = addr;
  log(`Saved contract ${addr}`, "ok");
}
function getSavedAddress() { return localStorage.getItem("catalyst_contract") || DEFAULT_CONTRACT; }

async function initReadContract() {
  if (!CONTRACT_ADDR) throw new Error("Contract address empty");
  if (!READ_PROVIDER) await setupReadProvider(localStorage.getItem("catalyst_rpc") || DEFAULT_RPC);
  const abi = await loadABI();
  READ_CONTRACT = new ethers.Contract(CONTRACT_ADDR, abi, READ_PROVIDER);
  return READ_CONTRACT;
}

async function initWriteContract() {
  if (!USER_ADDR || !SIGNER) await connectWallet();
  if (!CONTRACT_ADDR) throw new Error("Contract address empty");
  const abi = await loadABI();
  WRITE_CONTRACT = new ethers.Contract(CONTRACT_ADDR, abi, SIGNER);
  return WRITE_CONTRACT;
}

/* =========================
   UTIL PARSERS
   ========================= */
function parseAddress(val) {
  const v = (val||"").trim();
  if (!ethers.isAddress(v)) throw new Error("Invalid address");
  return v;
}
function parseUint(val) {
  const s = (val||"").toString().trim();
  if (!s) return 0n;
  return BigInt(s);
}
function parseIdsCSV(str) {
  return (str||"").split(",").map(s=>s.trim()).filter(Boolean).map(s=>BigInt(s));
}

/* =========================
   Wallet guard for writes
   ========================= */
function requireWallet() {
  if (!USER_ADDR || !SIGNER) throw new Error("Please connect wallet first");
}

/* =========================
   Stats (read-only)
   ========================= */
async function refreshStats() {
  try {
    if (!CONTRACT_ADDR) throw new Error("Set contract address first");
    await initReadContract();
    const s = await READ_CONTRACT.stakingStats();
    $("st_totalAll").textContent = s.totalAll.toString();
    $("st_totalTerm").textContent = s.totalTerm.toString();
    $("st_totalPermanent").textContent = s.totalPermanent.toString();
    $("st_remainingGlobal").textContent = s.remainingGlobal.toString();
    $("st_remainingTerm").textContent = s.remainingTerm.toString();
    $("st_remainingPermanent").textContent = s.remainingPermanent.toString();
    const tb = await READ_CONTRACT.treasuryBalance();
    $("st_treasury").textContent = tb.toString();
    const dep = await READ_CONTRACT.deployerAddress();
    $("st_deployer").textContent = formatAddr(dep);
    const paused = await READ_CONTRACT.paused();
    $("st_paused").textContent = paused ? "true" : "false";
    log("Stats refreshed", "ok");
  } catch (e) {
    log(`refreshStats error: ${e.message}`, "err");
  }
}
function toggleAutoRefresh(on) {
  if (refreshTimer) { clearInterval(refreshTimer); refreshTimer = null; }
  if (on) refreshTimer = setInterval(refreshStats, 8000);
}

/* =========================
   Fast UI wiring (immediate, non-blocking)
   ========================= */
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".tabbar button").forEach(btn=>{
    btn.onclick = () => {
      document.querySelectorAll(".tabbar button").forEach(b=>b.classList.remove("active"));
      btn.classList.add("active");
      const key = btn.dataset.tab;
      document.querySelectorAll(".tab").forEach(t=>t.style.display="none");
      const pane = document.getElementById("tab-"+key);
      if (pane) pane.style.display = "block";
    };
  });

  $("saveContractBtn").onclick = () => { try { saveContractAddress($("contractAddress").value.trim()); } catch(e){ log(e.message, "err"); } };
  $("saveRpc").onclick = async () => {
    const url = $("rpcUrl").value.trim();
    localStorage.setItem("catalyst_rpc", url);
    await setupReadProvider(url);
    if (CONTRACT_ADDR) { try { await initReadContract(); log("Read contract re-init", "ok"); } catch(e){ log(e.message, "err"); } }
  };

  $("walletBtn").onclick = async () => {
    try {
      if (!USER_ADDR) {
        await connectWallet();
      } else {
        disconnectWallet();
      }
      // update button state text
      $("walletBtn").textContent = USER_ADDR ? "Disconnect" : "Connect";
      $("acct").textContent = USER_ADDR ? formatAddr(USER_ADDR) : "Not connected";
    } catch (e) { log(e.message || e, "err"); }
  };

  $("btnRefresh").onclick = refreshStats;
  $("autoRefresh").onchange = (e) => toggleAutoRefresh(e.target.checked);

  log("UI wired (fast)", "ok");
});

/* =========================
   Background init (non-blocking)
   ========================= */
window.addEventListener("load", async () => {
  try {
    const savedRpc = localStorage.getItem("catalyst_rpc") || DEFAULT_RPC;
    $("rpcUrl").value = savedRpc;
    await setupReadProvider(savedRpc);

    const saved = getSavedAddress();
    if (saved) { CONTRACT_ADDR = saved; $("contractAddress").value = saved; try { await initReadContract(); } catch(e){} }

    // restore wallet silently if available
    if (window.ethereum) {
      const accounts = await window.ethereum.request({ method: "eth_accounts" });
      if (accounts && accounts.length>0) {
        WALLET_PROVIDER = new ethers.BrowserProvider(window.ethereum);
        SIGNER = await WALLET_PROVIDER.getSigner();
        USER_ADDR = accounts[0];
        $("acct").textContent = formatAddr(USER_ADDR);
        $("walletBtn").textContent = "Disconnect";
        log(`Restored wallet: ${USER_ADDR}`, "ok");
      }
    }

    if (CONTRACT_ADDR) await refreshStats();
    log("Background init complete", "ok");
  } catch (e) { log(`Init error: ${e.message}`, "err"); }
});

/* =========================
   STAKE / BATCH / HARVEST
   ========================= */
$("btnApprove721").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const nft = new ethers.Contract(col, ERC721_ABI, SIGNER);
    const tx = await nft.setApprovalForAll(CONTRACT_ADDR, true);
    log(`Approve tx: ${tx.hash}`); await tx.wait(); log("Approval confirmed", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnStake").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const permanent = $("permanent").value === "true";
    const tx = await WRITE_CONTRACT.stake(col, id, permanent);
    log(`Stake tx: ${tx.hash}`); await tx.wait(); log("Stake confirmed", "ok");
    await refreshStats();
  } catch (e) { log(e.message || e, "err"); }
};

$("btnHarvestOne").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const tx = await WRITE_CONTRACT.harvest(col, id);
    log(`Harvest tx: ${tx.hash}`); await tx.wait(); log("Harvest confirmed", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnUnstake").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const tx = await WRITE_CONTRACT.unstake(col, id);
    log(`Unstake tx: ${tx.hash}`); await tx.wait(); log("Unstaked", "ok");
    await refreshStats();
  } catch (e) { log(e.message || e, "err"); }
};

$("btnViewPending").onclick = async () => {
  try {
    if (!CONTRACT_ADDR) throw new Error("Set contract");
    await initReadContract();
    const col = parseAddress($("colStake").value);
    let owner = USER_ADDR || "";
    if (!owner) throw new Error("Connect wallet or provide owner in Views");
    const id = parseUint($("tidStake").value);
    const r = await READ_CONTRACT.pendingRewardsView(col, owner, id);
    $("pendingView").textContent = r.toString();
    log("Pending fetched", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnApprove721Batch").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colBatch").value);
    const nft = new ethers.Contract(col, ERC721_ABI, SIGNER);
    const tx = await nft.setApprovalForAll(CONTRACT_ADDR, true);
    log(`Approve batch tx: ${tx.hash}`); await tx.wait(); log("Approved", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnBatchStake").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colBatch").value);
    const ids = parseIdsCSV($("tidsBatch").value);
    if (ids.length === 0) throw new Error("No token ids");
    const permanent = $("permanentBatch").value === "true";
    const tx = await WRITE_CONTRACT.batchStake(col, ids, permanent);
    log(`BatchStake tx: ${tx.hash}`); await tx.wait(); log("Batch stake confirmed", "ok");
    await refreshStats();
  } catch (e) { log(e.message || e, "err"); }
};

$("btnRegister").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colRegister").value);
    const supply = parseUint($("declaredSupply").value);
    const tx = await WRITE_CONTRACT.registerCollection(col, supply);
    log(`Register tx: ${tx.hash}`); await tx.wait(); log("Collection registered", "ok");
    await refreshStats();
  } catch (e) { log(e.message || e, "err"); }
};

/* =========================
   BLUE-CHIP
   ========================= */
$("btnEnrollBlue").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const tx = await WRITE_CONTRACT.enrollBluechip();
    log(`Enroll tx: ${tx.hash}`); await tx.wait(); log("Enrolled", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnHarvestBlue").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colBlueHarvest").value);
    const tx = await WRITE_CONTRACT.harvestBluechip(col);
    log(`Harvest blue tx: ${tx.hash}`); await tx.wait(); log("Blue-chip harvested", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnSetBlue").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const col = parseAddress($("colFlagBlue").value);
    const isBlue = $("isBlueFlag").value === "true";
    const tx = await WRITE_CONTRACT.setBluechipCollection(col, isBlue);
    log(`SetBlue tx: ${tx.hash}`); await tx.wait(); log("Blue-chip flag updated", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

/* =========================
   GOVERNANCE
   ========================= */
$("btnPropose").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const pType = Number($("pType").value);
    const paramTarget = Number($("paramTarget").value || 0);
    const newValue = parseUint($("newValue").value);
    const ctx = ($("collCtx").value.trim() || "0x0000000000000000000000000000000000000000");
    const tx = await WRITE_CONTRACT.propose(pType, paramTarget, newValue, ctx);
    log(`Propose tx: ${tx.hash}`); await tx.wait(); log("Proposal created", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnVote").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const id = $("propId").value.trim();
    const tx = await WRITE_CONTRACT.vote(id);
    log(`Vote tx: ${tx.hash}`); await tx.wait(); log("Voted", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnExecute").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const id = $("propId").value.trim();
    const tx = await WRITE_CONTRACT.executeProposal(id);
    log(`Execute tx: ${tx.hash}`); await tx.wait(); log("Executed", "ok");
    await refreshStats();
  } catch (e) { log(e.message || e, "err"); }
};

/* =========================
   GUARDIANS
   ========================= */
$("btnPropDep").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const addr = parseAddress($("newDeployer").value);
    const tx = await WRITE_CONTRACT.proposeDeployerRecovery(addr);
    log(`ProposeDeployer tx: ${tx.hash}`); await tx.wait(); log("Proposed", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnApproveDep").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const tx = await WRITE_CONTRACT.approveDeployerRecovery();
    log(`ApproveDeployer tx: ${tx.hash}`); await tx.wait(); log("Approved", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnExecDep").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const tx = await WRITE_CONTRACT.executeDeployerRecovery();
    log(`ExecDeployer tx: ${tx.hash}`); await tx.wait(); log("Executed", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnPropAdm").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const addr = parseAddress($("newAdmin").value);
    const tx = await WRITE_CONTRACT.proposeAdminRecovery(addr);
    log(`ProposeAdmin tx: ${tx.hash}`); await tx.wait(); log("Proposed", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnApproveAdm").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const tx = await WRITE_CONTRACT.approveAdminRecovery();
    log(`ApproveAdmin tx: ${tx.hash}`); await tx.wait(); log("Approved", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnExecAdm").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const tx = await WRITE_CONTRACT.executeAdminRecovery();
    log(`ExecAdmin tx: ${tx.hash}`); await tx.wait(); log("Executed", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnSetDepGuardian").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const idx = Number($("depIdx").value || 0);
    const gaddr = parseAddress($("depGuardian").value);
    const tx = await WRITE_CONTRACT.setDeployerGuardian(idx, gaddr);
    log(`SetDepGuardian tx: ${tx.hash}`); await tx.wait(); log("Guardian set", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnSetAdmGuardian").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const idx = Number($("admIdx").value || 0);
    const gaddr = parseAddress($("admGuardian").value);
    const tx = await WRITE_CONTRACT.setAdminGuardian(idx, gaddr);
    log(`SetAdmGuardian tx: ${tx.hash}`); await tx.wait(); log("Guardian set", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

/* =========================
   ADMIN
   ========================= */
$("btnPause").onclick = async () => {
  try { requireWallet(); await initWriteContract(); const tx = await WRITE_CONTRACT.pause(); log(`Pause tx: ${tx.hash}`); await tx.wait(); log("Paused","ok"); await refreshStats(); } catch(e){ log(e.message || e, "err"); }
};
$("btnUnpause").onclick = async () => {
  try { requireWallet(); await initWriteContract(); const tx = await WRITE_CONTRACT.unpause(); log(`Unpause tx: ${tx.hash}`); await tx.wait(); log("Unpaused","ok"); await refreshStats(); } catch(e){ log(e.message || e, "err"); }
};
$("btnWithdraw").onclick = async () => {
  try {
    requireWallet();
    await initWriteContract();
    const to = parseAddress($("toTreasury").value);
    const amt = parseUint($("amtTreasury").value);
    const tx = await WRITE_CONTRACT.withdrawTreasury(to, amt);
    log(`Withdraw tx: ${tx.hash}`); await tx.wait(); log("Withdrawn", "ok"); await refreshStats();
  } catch (e) { log(e.message || e, "err"); }
};

/* =========================
   VIEWS / INFO
   ========================= */
$("btnViewPending2").onclick = async () => {
  try {
    if (!CONTRACT_ADDR) throw new Error("Set contract");
    await initReadContract();
    const col = parseAddress($("vCol").value);
    let owner = ($("vOwner").value || "").trim();
    if (!owner) {
      if (!USER_ADDR) throw new Error("Connect wallet or fill owner");
      owner = USER_ADDR;
    }
    const tid = parseUint($("vTokenId").value);
    const r = await READ_CONTRACT.pendingRewardsView(col, owner, tid);
    $("pendingOut").textContent = r.toString();
    log("Pending (views) fetched", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnUserInfo").onclick = async () => {
  try {
    if (!CONTRACT_ADDR) throw new Error("Set contract");
    await initReadContract();
    const user = ($("infoUser").value || "").trim() || USER_ADDR;
    if (!user) throw new Error("Provide user or connect wallet");
    const col = $("infoCol").value.trim();
    $("ui_address").textContent = user;
    if (col) {
      $("ui_collection").textContent = col;
      const idx = await READ_CONTRACT.registeredIndex(col);
      const blue = await READ_CONTRACT.isBluechipCollection(col);
      $("ci_index").textContent = idx.toString();
      $("ci_blue").textContent = blue ? "true" : "false";
      // pending rewards for tokenId 0 as sample
      const r = await READ_CONTRACT.pendingRewardsView(col, user, 0n);
      $("ui_pending").textContent = r.toString();
    } else {
      $("ui_collection").textContent = "—";
      $("ci_index").textContent = "—";
      $("ci_blue").textContent = "—";
      $("ui_pending").textContent = "—";
    }
    log("User info fetched", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnColInfo").onclick = async () => {
  try {
    if (!CONTRACT_ADDR) throw new Error("Set contract");
    await initReadContract();
    const col = parseAddress($("infoCol").value);
    const idx = await READ_CONTRACT.registeredIndex(col);
    const blue = await READ_CONTRACT.isBluechipCollection(col);
    $("ci_index").textContent = idx.toString();
    $("ci_blue").textContent = blue ? "true" : "false";
    log("Collection info fetched", "ok");
  } catch (e) { log(e.message || e, "err"); }
};

$("btnListCollections").onclick = async () => {
  try {
    if (!CONTRACT_ADDR) throw new Error("Set contract");
    await initReadContract();
    // There's no direct count; we iterate until revert or until a big cap.
    // If your contract exposes registeredCollections(uint256) and registeredIndex, we can attempt to read indexes.
    // We'll try reading index 0..9999 and stop when function returns zero-address or throws.
    const tbody = $("registeredTable").querySelector("tbody");
    tbody.innerHTML = "";
    let count = 0;
    for (let i=0; i<5000; ++i) {
      try {
        const addr = await READ_CONTRACT.registeredCollections(i);
        if (!addr || addr === "0x0000000000000000000000000000000000000000") break;
        const row = document.createElement("tr");
        row.innerHTML = `<td>${i}</td><td>${addr}</td>`;
        tbody.appendChild(row);
        count++;
      } catch (err) {
        // likely out of range => stop
        break;
      }
    }
    $("ci_count").textContent = count.toString();
    log(`Listed ${count} registered collections (attempted up to 5000)`, "ok");
  } catch (e) {
    log(e.message || e, "err");
  }
};

/* =========================
   Auto cleanup on unload
   ========================= */
window.addEventListener("beforeunload", () => {
  if (refreshTimer) clearInterval(refreshTimer);
});
</script>
</body>
</html>
