// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/* ──────────────────────────────────────────────────────────────
   StakingLib
─────────────────────────────────────────────────────────────── */
library StakingLib {
    uint256 public constant GLOBAL_CAP = 1_000_000_000;
    uint256 public constant TERM_CAP   = 750_000_000;
    uint256 public constant PERM_CAP   = 250_000_000;

    struct StakeInfo {
        uint256 stakeBlock;
        uint256 lastHarvestBlock;
        bool currentlyStaked;
        bool isPermanent;
        uint256 unstakeDeadlineBlock;
    }

    struct CollectionConfig {
        uint256 totalStaked;
        uint256 totalStakers;
        bool registered;
        uint256 declaredSupply;
    }

    struct Storage {
        uint256 totalStakedAll;
        uint256 totalStakedTerm;
        uint256 totalStakedPermanent;

        mapping(address => CollectionConfig) collectionConfigs;
        mapping(address => mapping(address => mapping(uint256 => StakeInfo))) stakeLog;
        mapping(address => mapping(address => uint256[])) stakePortfolioByUser;
        mapping(address => mapping(uint256 => uint256)) indexOfTokenIdInStakePortfolio;
        uint256 totalStakedNFTsCount;
        uint256 baseRewardRate;
    }

    event InternalStakeRecorded(address indexed owner, address indexed collection, uint256 indexed tokenId);
    event InternalUnstakeRecorded(address indexed owner, address indexed collection, uint256 indexed tokenId);

    function initCollection(Storage storage s, address collection, uint256 declaredSupply) internal {
        require(collection != address(0), "StakingLib: zero collection");
        CollectionConfig storage cfg = s.collectionConfigs[collection];
        require(!cfg.registered, "StakingLib: already reg");
        require(declaredSupply > 0 && declaredSupply <= 20000, "StakingLib: bad supply");
        cfg.declaredSupply = declaredSupply;
        cfg.registered = true;
        cfg.totalStaked = 0;
        cfg.totalStakers = 0;
    }

    function recordTermStake(
        Storage storage s,
        address collection,
        address staker,
        uint256 tokenId,
        uint256 currentBlock,
        uint256 termDurationBlocks,
        uint256 rewardRateIncrementPerNFT
    ) internal {
        require(staker != address(0), "StakingLib: zero staker");
        require(s.totalStakedAll + 1 <= GLOBAL_CAP, "CATA: global cap reached");
        require(s.totalStakedTerm + 1 <= TERM_CAP, "CATA: term cap reached");

        CollectionConfig storage cfg = s.collectionConfigs[collection];
        require(cfg.registered, "StakingLib: not reg");

        StakeInfo storage info = s.stakeLog[collection][staker][tokenId];
        require(!info.currentlyStaked, "StakingLib: already staked");

        info.stakeBlock = currentBlock;
        info.lastHarvestBlock = currentBlock;
        info.currentlyStaked = true;
        info.isPermanent = false;
        info.unstakeDeadlineBlock = currentBlock + termDurationBlocks;

        if (s.stakePortfolioByUser[collection][staker].length == 0) cfg.totalStakers += 1;
        cfg.totalStaked += 1;

        s.totalStakedNFTsCount += 1;
        s.baseRewardRate += rewardRateIncrementPerNFT;

        s.stakePortfolioByUser[collection][staker].push(tokenId);
        s.indexOfTokenIdInStakePortfolio[collection][tokenId] =
            s.stakePortfolioByUser[collection][staker].length - 1;

        s.totalStakedAll += 1;
        s.totalStakedTerm += 1;

        emit InternalStakeRecorded(staker, collection, tokenId);
    }

    function recordPermanentStake(
        Storage storage s,
        address collection,
        address staker,
        uint256 tokenId,
        uint256 currentBlock,
        uint256 rewardRateIncrementPerNFT
    ) internal {
        require(staker != address(0), "StakingLib: zero staker");
        require(s.totalStakedAll + 1 <= GLOBAL_CAP, "CATA: global cap reached");
        require(s.totalStakedPermanent + 1 <= PERM_CAP, "CATA: perm cap reached");

        CollectionConfig storage cfg = s.collectionConfigs[collection];
        require(cfg.registered, "StakingLib: not reg");

        StakeInfo storage info = s.stakeLog[collection][staker][tokenId];
        require(!info.currentlyStaked, "StakingLib: already staked");

        info.stakeBlock = currentBlock;
        info.lastHarvestBlock = currentBlock;
        info.currentlyStaked = true;
        info.isPermanent = true;
        info.unstakeDeadlineBlock = 0;

        if (s.stakePortfolioByUser[collection][staker].length == 0) cfg.totalStakers += 1;
        cfg.totalStaked += 1;

        s.totalStakedNFTsCount += 1;
        s.baseRewardRate += rewardRateIncrementPerNFT;

        s.stakePortfolioByUser[collection][staker].push(tokenId);
        s.indexOfTokenIdInStakePortfolio[collection][tokenId] =
            s.stakePortfolioByUser[collection][staker].length - 1;

        s.totalStakedAll += 1;
        s.totalStakedPermanent += 1;

        emit InternalStakeRecorded(staker, collection, tokenId);
    }

    function recordUnstake(
        Storage storage s,
        address collection,
        address staker,
        uint256 tokenId,
        uint256 rewardRateIncrementPerNFT
    ) internal {
        StakeInfo storage info = s.stakeLog[collection][staker][tokenId];
        require(info.currentlyStaked, "StakingLib: not staked");

        bool wasPermanent = info.isPermanent;
        info.currentlyStaked = false;

        uint256[] storage port = s.stakePortfolioByUser[collection][staker];
        uint256 idx = s.indexOfTokenIdInStakePortfolio[collection][tokenId];
        uint256 last = port.length - 1;
        if (idx != last) {
            uint256 lastTokenId = port[last];
            port[idx] = lastTokenId;
            s.indexOfTokenIdInStakePortfolio[collection][lastTokenId] = idx;
        }
        port.pop();
        delete s.indexOfTokenIdInStakePortfolio[collection][tokenId];

        CollectionConfig storage cfg = s.collectionConfigs[collection];
        if (port.length == 0 && cfg.totalStakers > 0) cfg.totalStakers -= 1;
        if (cfg.totalStaked > 0) cfg.totalStaked -= 1;

        if (s.baseRewardRate >= rewardRateIncrementPerNFT) s.baseRewardRate -= rewardRateIncrementPerNFT;
        if (s.totalStakedNFTsCount > 0) s.totalStakedNFTsCount -= 1;

        s.totalStakedAll -= 1;
        if (wasPermanent) {
            s.totalStakedPermanent -= 1;
        } else {
            s.totalStakedTerm -= 1;
        }

        emit InternalUnstakeRecorded(staker, collection, tokenId);
    }

    function pendingRewards(
        Storage storage s,
        address collection,
        address owner,
        uint256 tokenId,
        uint256 numberOfBlocksPerRewardUnit
    ) internal view returns (uint256) {
        StakeInfo memory info = s.stakeLog[collection][owner][tokenId];
        if (!info.currentlyStaked || s.baseRewardRate == 0 || s.totalStakedNFTsCount == 0) return 0;
        if (!info.isPermanent && block.number >= info.unstakeDeadlineBlock) return 0;

        uint256 blocksPassed = block.number - info.lastHarvestBlock;
        if (blocksPassed == 0) return 0;
        uint256 numerator = blocksPassed * s.baseRewardRate;
        uint256 rewardAmount = (numerator / numberOfBlocksPerRewardUnit) / s.totalStakedNFTsCount;
        return rewardAmount;
    }

    function updateLastHarvest(Storage storage s, address collection, address owner, uint256 tokenId) internal {
        StakeInfo storage info = s.stakeLog[collection][owner][tokenId];
        info.lastHarvestBlock = block.number;
    }
}

/* ──────────────────────────────────────────────────────────────
   GovernanceLib
─────────────────────────────────────────────────────────────── */
library GovernanceLib {
    enum ProposalType {
        BASE_REWARD,
        HARVEST_FEE,
        UNSTAKE_FEE,
        REGISTRATION_FEE_FALLBACK,
        VOTING_PARAM,
        TIER_UPGRADE
    }

    struct Proposal {
        ProposalType pType;
        uint8 paramTarget;
        uint256 newValue;
        address collectionAddress;
        address proposer;
        uint256 startBlock;
        uint256 endBlock;
        uint256 votesScaled;
        bool executed;
    }

    struct Storage {
        mapping(bytes32 => Proposal) proposals;
        mapping(bytes32 => mapping(address => bool)) hasVoted;
        mapping(bytes32 => mapping(address => uint256)) proposalCollectionVotesScaled;
        uint256 votingDurationBlocks;
        uint256 minVotesRequiredScaled;
        uint256 collectionVoteCapPercent;
    }

    event ProposalCreated(
        bytes32 indexed id,
        ProposalType pType,
        uint8 paramTarget,
        address indexed collection,
        address indexed proposer,
        uint256 newValue,
        uint256 startBlock,
        uint256 endBlock
    );
    event VoteCast(bytes32 indexed id, address indexed voter, uint256 weightScaled, address attributedCollection);
    event ProposalMarkedExecuted(bytes32 indexed id);

    function initGov(
        Storage storage g,
        uint256 votingDurationBlocks_,
        uint256 minVotesRequiredScaled_,
        uint256 collectionVoteCapPercent_
    ) internal {
        require(collectionVoteCapPercent_ <= 100, "GovernanceLib: cap>100");
        g.votingDurationBlocks = votingDurationBlocks_;
        g.minVotesRequiredScaled = minVotesRequiredScaled_;
        g.collectionVoteCapPercent = collectionVoteCapPercent_;
    }

    function createProposal(
        Storage storage g,
        ProposalType pType,
        uint8 paramTarget,
        uint256 newValue,
        address collection,
        address proposer,
        uint256 currentBlock
    ) internal returns (bytes32) {
        bytes32 id = keccak256(
            abi.encodePacked(uint256(pType), paramTarget, newValue, collection, currentBlock, proposer)
        );
        Proposal storage p = g.proposals[id];
        require(p.startBlock == 0, "GovernanceLib: exists");

        p.pType = pType;
        p.paramTarget = paramTarget;
        p.newValue = newValue;
        p.collectionAddress = collection;
        p.proposer = proposer;
        p.startBlock = currentBlock;
        p.endBlock = currentBlock + g.votingDurationBlocks;
        p.votesScaled = 0;
        p.executed = false;

        emit ProposalCreated(id, pType, paramTarget, collection, proposer, newValue, p.startBlock, p.endBlock);
        return id;
    }

    function castVote(
        Storage storage g,
        bytes32 id,
        address voter,
        uint256 weightScaled,
        address attributedCollection
    ) internal {
        Proposal storage p = g.proposals[id];
        require(p.startBlock != 0, "GovernanceLib: not found");
        require(block.number >= p.startBlock && block.number <= p.endBlock, "GovernanceLib: closed");
        require(!p.executed, "GovernanceLib: executed");
        require(!g.hasVoted[id][voter], "GovernanceLib: voted");
        require(weightScaled > 0, "GovernanceLib: zero weight");

        uint256 cap = (g.minVotesRequiredScaled * g.collectionVoteCapPercent) / 100;
        uint256 cur = g.proposalCollectionVotesScaled[id][attributedCollection];
        require(cur + weightScaled <= cap, "GovernanceLib: cap");

        g.hasVoted[id][voter] = true;
        p.votesScaled += weightScaled;
        g.proposalCollectionVotesScaled[id][attributedCollection] = cur + weightScaled;

        emit VoteCast(id, voter, weightScaled, attributedCollection);
    }

    function validateForExecution(Storage storage g, bytes32 id) internal view returns (Proposal memory) {
        Proposal memory p = g.proposals[id];
        require(p.startBlock != 0, "GovernanceLib: not found");
        require(block.number > p.endBlock, "GovernanceLib: voting");
        require(!p.executed, "GovernanceLib: executed");
        require(p.votesScaled >= g.minVotesRequiredScaled, "GovernanceLib: quorum");
        return p;
    }

    function markExecuted(Storage storage g, bytes32 id) internal {
        g.proposals[id].executed = true;
        emit ProposalMarkedExecuted(id);
    }
}

/* ──────────────────────────────────────────────────────────────
   BluechipLib
─────────────────────────────────────────────────────────────── */
library BluechipLib {
    struct WalletEnrollment {
        bool enrolled;
        uint256 lastHarvestBlock;
    }

    struct Storage {
        mapping(address => mapping(address => WalletEnrollment)) bluechipWallets;
        mapping(address => bool) isBluechipCollection; 
        uint256 bluechipWalletFee;
    }

    function enroll(
        Storage storage b,
        address collection,
        address wallet,
        uint256 blockNum,
        uint256 fee,
        function(address,uint256) internal feeHandler
    ) internal {
        WalletEnrollment storage we = b.bluechipWallets[collection][wallet];
        require(!we.enrolled, "Already enrolled");

        if (fee > 0) {
            feeHandler(wallet, fee);
        }

        we.enrolled = true;
        we.lastHarvestBlock = blockNum;
    }

    function harvest(
        Storage storage b,
        address collection,
        address wallet,
        uint256 blockNum,
        uint256 baseRewardRate,
        uint256 blocksPerRewardUnit,
        function(address,uint256) internal mintReward
    ) internal {
        WalletEnrollment storage we = b.bluechipWallets[collection][wallet];
        require(we.enrolled, "Not enrolled");

        uint256 blocksElapsed = blockNum - we.lastHarvestBlock;
        uint256 reward = (blocksElapsed * baseRewardRate) / blocksPerRewardUnit;

        if (reward > 0) {
            mintReward(wallet, reward);
        }

        we.lastHarvestBlock = blockNum;
    }
}

/* ──────────────────────────────────────────────────────────────
   CatalystNFTStakingUpgradeable
─────────────────────────────────────────────────────────────── */

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract CatalystNFTStakingUpgradeable is
    Initializable,
    UUPSUpgradeable,
    ERC20Upgradeable,
    AccessControlUpgradeable,
    ReentrancyGuardUpgradeable,
    PausableUpgradeable,
    IERC721Receiver
{
    using StakingLib for StakingLib.Storage;

    // -------- Errors (gas-cheap) --------
    error ZeroAddress();
    error BadParam();
    error NotRegistered();
    error AlreadyExists();
    error NotStaked();
    error TermNotExpired();
    error Cooldown();
    error BatchTooLarge();
    error Ineligible();
    error Unauthorized();
    error NoRequest();
    error Expired();
    error AlreadyApproved();
    error Threshold();
    error Insufficient();

    // -------- Roles --------
    bytes32 public constant CONTRACT_ADMIN_ROLE = keccak256("CONTRACT_ADMIN_ROLE");

    // -------- Constants --------
    // immutable fee split (basis points)
    uint256 public constant BURN_BP = 9000;      // 90%
    uint256 public constant TREASURY_BP = 900;   // 9%
    uint256 public constant DEPLOYER_BP = 100;   // 1%
    uint256 public constant BP_DENOM = 10000;

    // caps (must mirror lib)
    uint256 public constant GLOBAL_CAP = 1_000_000_000;
    uint256 public constant TERM_CAP   = 750_000_000;
    uint256 public constant PERM_CAP   = 250_000_000;

    uint256 public constant MAX_HARVEST_BATCH = 50;
    uint256 public constant MAX_STAKE_PER_COLLECTION = 20_000;
    uint256 public constant WEIGHT_SCALE = 1e18;

    // Guardian Councils (updated thresholds)
    uint8 public constant DEPLOYER_GCOUNT = 7;
    uint8 public constant DEPLOYER_THRESHOLD = 5;

    uint8 public constant ADMIN_GCOUNT = 7;
    uint8 public constant ADMIN_THRESHOLD = 5;

    uint256 public constant RECOVERY_WINDOW = 3 days;

    // -------- Library storage --------
    StakingLib.Storage internal s;     // custodial staking only
    GovernanceLib.Storage internal g;  // governance
    BluechipLib.Storage internal b;    // blue-chip non-custodial

    // -------- Protocol params --------
    uint256 public numberOfBlocksPerRewardUnit;     // reward scaler
    uint256 public termDurationBlocks;              // term length
    uint256 public stakingCooldownBlocks;           // anti-spam
    uint256 public rewardRateIncrementPerNFT;       // base reward increment per NFT
    uint256 public initialHarvestBurnFeeRate;       // % of harvested rewards to burn
    uint256 public unstakeBurnFee;                  // fixed fee on unstake (CATA)

    // collection registration fee (fallback/min)
    uint256 public collectionRegistrationFee;

    // treasury + deployer
    address public treasuryAddress;
    address public deployerAddress;
    uint256 public treasuryBalance;

    // governance helpers
    uint256 public minStakeAgeForVoting;
    uint256 public maxBaseRewardRate;

    // registration enumeration
    address[] public registeredCollections;
    mapping(address => uint256) public registeredIndex; // index+1 (0==not registered)

    // burner bookkeeping (optional, kept lean)
    mapping(address => uint256) public burnedCatalystByAddress;

    // user staking cooldown
    mapping(address => uint256) public lastStakingBlock;

    // -------- Guardian state --------
    address[DEPLOYER_GCOUNT] public deployerGuardians;
    mapping(address => bool) public isDeployerGuardian;

    address[ADMIN_GCOUNT] public adminGuardians;
    mapping(address => bool) public isAdminGuardian;

    struct RecoveryRequest {
        address proposed;
        uint8 approvals;
        uint256 deadline;
        bool executed;
    }

    RecoveryRequest public deployerRecovery;
    mapping(address => bool) public deployerHasApproved;

    RecoveryRequest public adminRecovery;
    mapping(address => bool) public adminHasApproved;

    // -------- Events (compressed) --------
    event CollectionAdded(address indexed collection, uint256 declaredSupply, uint256 paid);
    event NFTStaked(address indexed owner, address indexed collection, uint256 indexed tokenId, bool permanent);
    event NFTUnstaked(address indexed owner, address indexed collection, uint256 indexed tokenId);
    event RewardsHarvested(address indexed owner, address indexed collection, uint256 gross, uint256 burned);
    event TreasuryDeposit(address indexed from, uint256 amount);
    event TreasuryWithdrawal(address indexed to, uint256 amount);

    event GuardianSet(bytes32 council, uint8 idx, address guardian);
    event DeployerRecoveryProposed(address indexed proposer, address proposed, uint256 deadline);
    event DeployerRecoveryApproved(address indexed guardian, uint8 approvals);
    event DeployerRecovered(address indexed oldDeployer, address indexed newDeployer);

    event AdminRecoveryProposed(address indexed proposer, address proposed, uint256 deadline);
    event AdminRecoveryApproved(address indexed guardian, uint8 approvals);
    event AdminRecovered(address indexed newAdmin);

    event BaseRewardRateUpdated(uint256 oldValue, uint256 newValue);
    event HarvestFeeUpdated(uint256 oldValue, uint256 newValue);
    event UnstakeFeeUpdated(uint256 oldValue, uint256 newValue);
    event RegistrationFeeUpdated(uint256 oldValue, uint256 newValue);
    event VotingParamUpdated(uint8 target, uint256 oldValue, uint256 newValue);
    event ProposalExecuted(bytes32 indexed id, uint256 appliedValue);

    // -------- Initializer --------
    struct InitConfig {
        address owner;
        // fees & rewards
        uint256 rewardRateIncrementPerNFT;
        uint256 initialHarvestBurnFeeRate;  // 0..100 (percentage)
        uint256 unstakeBurnFee;             // flat CATA
        uint256 termDurationBlocks;
        uint256 numberOfBlocksPerRewardUnit;
        uint256 collectionRegistrationFee;
        uint256 stakingCooldownBlocks;
        // governance
        uint256 votingDurationBlocks;
        uint256 minVotesRequiredScaled;
        uint256 collectionVoteCapPercent;   // 0..100
        uint256 minStakeAgeForVoting;
        uint256 maxBaseRewardRate;          // safety clamp
        // guardians
        address[DEPLOYER_GCOUNT] deployerGuardians;
        address[ADMIN_GCOUNT] adminGuardians;
        // bluechip
        uint256 bluechipWalletFee;          // per-wallet (Option A)
    }

    function initialize(InitConfig calldata cfg) external initializer {
        if (cfg.owner == address(0)) revert ZeroAddress();

        __ERC20_init("Catalyst", "CATA");
        __AccessControl_init();
        __UUPSUpgradeable_init();
        __ReentrancyGuard_init();
        __Pausable_init();

        _grantRole(DEFAULT_ADMIN_ROLE, cfg.owner);
        _grantRole(CONTRACT_ADMIN_ROLE, cfg.owner);

        deployerAddress = cfg.owner;
        treasuryAddress = address(this);

        rewardRateIncrementPerNFT = cfg.rewardRateIncrementPerNFT;
        initialHarvestBurnFeeRate = cfg.initialHarvestBurnFeeRate;
        unstakeBurnFee = cfg.unstakeBurnFee;
        termDurationBlocks = cfg.termDurationBlocks;
        numberOfBlocksPerRewardUnit = cfg.numberOfBlocksPerRewardUnit;
        collectionRegistrationFee = cfg.collectionRegistrationFee;
        stakingCooldownBlocks = cfg.stakingCooldownBlocks;

        minStakeAgeForVoting = cfg.minStakeAgeForVoting;
        maxBaseRewardRate = cfg.maxBaseRewardRate == 0 ? type(uint256).max : cfg.maxBaseRewardRate;

        // Setup governance
        GovernanceLib.initGov(
            g,
            cfg.votingDurationBlocks,
            cfg.minVotesRequiredScaled,
            cfg.collectionVoteCapPercent
        );

        // Seed guardians
        for (uint8 i = 0; i < DEPLOYER_GCOUNT; ++i) {
            address a = cfg.deployerGuardians[i];
            deployerGuardians[i] = a;
            if (a != address(0)) isDeployerGuardian[a] = true;
            emit GuardianSet(keccak256("DEPLOYER"), i, a);
        }
        for (uint8 j = 0; j < ADMIN_GCOUNT; ++j) {
            address a = cfg.adminGuardians[j];
            adminGuardians[j] = a;
            if (a != address(0)) isAdminGuardian[a] = true;
            emit GuardianSet(keccak256("ADMIN"), j, a);
        }

        // Blue-chip config (per-wallet fee, Option A)
        b.bluechipWalletFee = cfg.bluechipWalletFee;

        // optional genesis mint if desired by deployer (kept minimal)
         _mint(cfg.owner, 100_000_000 * 1e18);
    }

    // -------- Guardians: admin setters --------
    function setDeployerGuardian(uint8 idx, address guardian) external onlyRole(DEFAULT_ADMIN_ROLE) {
        if (idx >= DEPLOYER_GCOUNT) revert BadParam();
        address old = deployerGuardians[idx];
        if (old != address(0)) isDeployerGuardian[old] = false;
        deployerGuardians[idx] = guardian;
        if (guardian != address(0)) isDeployerGuardian[guardian] = true;
        emit GuardianSet(keccak256("DEPLOYER"), idx, guardian);
    }

    function setAdminGuardian(uint8 idx, address guardian) external onlyRole(DEFAULT_ADMIN_ROLE) {
        if (idx >= ADMIN_GCOUNT) revert BadParam();
        address old = adminGuardians[idx];
        if (old != address(0)) isAdminGuardian[old] = false;
        adminGuardians[idx] = guardian;
        if (guardian != address(0)) isAdminGuardian[guardian] = true;
        emit GuardianSet(keccak256("ADMIN"), idx, guardian);
    }

    // -------- Deployer recovery (7:5) --------
    function proposeDeployerRecovery(address newDeployer) external whenNotPaused {
        if (!isDeployerGuardian[_msgSender()]) revert Unauthorized();
        if (newDeployer == address(0)) revert ZeroAddress();

        deployerRecovery = RecoveryRequest({
            proposed: newDeployer,
            approvals: 0,
            deadline: block.timestamp + RECOVERY_WINDOW,
            executed: false
        });

        for (uint8 i = 0; i < DEPLOYER_GCOUNT; ++i) {
            address gaddr = deployerGuardians[i];
            if (gaddr != address(0)) deployerHasApproved[gaddr] = false;
        }

        emit DeployerRecoveryProposed(_msgSender(), newDeployer, deployerRecovery.deadline);
    }

    function approveDeployerRecovery() external whenNotPaused {
        if (!isDeployerGuardian[_msgSender()]) revert Unauthorized();
        if (deployerRecovery.proposed == address(0)) revert NoRequest();
        if (block.timestamp > deployerRecovery.deadline) revert Expired();
        if (deployerRecovery.executed) revert AlreadyApproved();
        if (deployerHasApproved[_msgSender()]) revert AlreadyApproved();

        deployerHasApproved[_msgSender()] = true;
        deployerRecovery.approvals += 1;
        emit DeployerRecoveryApproved(_msgSender(), deployerRecovery.approvals);
    }

    function executeDeployerRecovery() external whenNotPaused {
        if (deployerRecovery.proposed == address(0)) revert NoRequest();
        if (block.timestamp > deployerRecovery.deadline) revert Expired();
        if (deployerRecovery.executed) revert AlreadyApproved();
        if (deployerRecovery.approvals < DEPLOYER_THRESHOLD) revert Threshold();

        address old = deployerAddress;
        deployerAddress = deployerRecovery.proposed;
        deployerRecovery.executed = true;

        // Optional: remove old if in council
        if (isDeployerGuardian[old]) {
            for (uint8 i = 0; i < DEPLOYER_GCOUNT; ++i) {
                if (deployerGuardians[i] == old) {
                    isDeployerGuardian[old] = false;
                    deployerGuardians[i] = address(0);
                    emit GuardianSet(keccak256("DEPLOYER"), i, address(0));
                    break;
                }
            }
        }

        emit DeployerRecovered(old, deployerAddress);
    }

    // -------- Admin recovery (7:5) --------
    function proposeAdminRecovery(address newAdmin) external whenNotPaused {
        if (!isAdminGuardian[_msgSender()]) revert Unauthorized();
        if (newAdmin == address(0)) revert ZeroAddress();

        adminRecovery = RecoveryRequest({
            proposed: newAdmin,
            approvals: 0,
            deadline: block.timestamp + RECOVERY_WINDOW,
            executed: false
        });

        for (uint8 i = 0; i < ADMIN_GCOUNT; ++i) {
            address gaddr = adminGuardians[i];
            if (gaddr != address(0)) adminHasApproved[gaddr] = false;
        }

        emit AdminRecoveryProposed(_msgSender(), newAdmin, adminRecovery.deadline);
    }

    function approveAdminRecovery() external whenNotPaused {
        if (!isAdminGuardian[_msgSender()]) revert Unauthorized();
        if (adminRecovery.proposed == address(0)) revert NoRequest();
        if (block.timestamp > adminRecovery.deadline) revert Expired();
        if (adminRecovery.executed) revert AlreadyApproved();
        if (adminHasApproved[_msgSender()]) revert AlreadyApproved();

        adminHasApproved[_msgSender()] = true;
        adminRecovery.approvals += 1;
        emit AdminRecoveryApproved(_msgSender(), adminRecovery.approvals);
    }

    function executeAdminRecovery() external whenNotPaused {
        if (adminRecovery.proposed == address(0)) revert NoRequest();
        if (block.timestamp > adminRecovery.deadline) revert Expired();
        if (adminRecovery.executed) revert AlreadyApproved();
        if (adminRecovery.approvals < ADMIN_THRESHOLD) revert Threshold();

        _grantRole(DEFAULT_ADMIN_ROLE, adminRecovery.proposed);
        adminRecovery.executed = true;

        emit AdminRecovered(adminRecovery.proposed);
    }

    // -------- Registration --------
    function registerCollection(address collection, uint256 declaredMaxSupply) external whenNotPaused nonReentrant {
        if (collection == address(0)) revert ZeroAddress();
        if (registeredIndex[collection] != 0) revert AlreadyExists();
        if (declaredMaxSupply == 0 || declaredMaxSupply > MAX_STAKE_PER_COLLECTION) revert BadParam();

        // pay fallback min fee (uniform, governance can adjust)
        if (collectionRegistrationFee > 0) _splitFeeFromSender(_msgSender(), collectionRegistrationFee);

        s.initCollection(collection, declaredMaxSupply);
        registeredCollections.push(collection);
        registeredIndex[collection] = registeredCollections.length;

        emit CollectionAdded(collection, declaredMaxSupply, collectionRegistrationFee);
    }

    // -------- Custodial Staking --------
    modifier notInCooldown() {
        if (block.number < lastStakingBlock[_msgSender()] + stakingCooldownBlocks) revert Cooldown();
        _;
    }

    function stake(address collection, uint256 tokenId, bool permanent)
        public
        whenNotPaused
        nonReentrant
        notInCooldown
    {
        if (collection == address(0)) revert ZeroAddress();

        // transfer NFT in (custodial)
        IERC721(collection).safeTransferFrom(_msgSender(), address(this), tokenId);

        if (permanent) {
            s.recordPermanentStake(
                collection,
                _msgSender(),
                tokenId,
                block.number,
                rewardRateIncrementPerNFT
            );
        } else {
            s.recordTermStake(
                collection,
                _msgSender(),
                tokenId,
                block.number,
                termDurationBlocks,
                rewardRateIncrementPerNFT
            );
        }

        lastStakingBlock[_msgSender()] = block.number;
        emit NFTStaked(_msgSender(), collection, tokenId, permanent);
    }

    function batchStake(address collection, uint256[] calldata tokenIds, bool permanent) external {
        uint256 n = tokenIds.length;
        if (n == 0 || n > MAX_HARVEST_BATCH) revert BatchTooLarge();
        for (uint256 i = 0; i < n; ++i) {
            stake(collection, tokenIds[i], permanent);
        }
    }

    function harvest(address collection, uint256 tokenId) external whenNotPaused nonReentrant {
        uint256 reward = s.pendingRewards(collection, _msgSender(), tokenId, numberOfBlocksPerRewardUnit);
        if (reward == 0) return;

        uint256 burnAmt = (reward * initialHarvestBurnFeeRate) / 100;
        _mint(_msgSender(), reward);
        if (burnAmt > 0) {
            _burn(_msgSender(), burnAmt);
            burnedCatalystByAddress[_msgSender()] += burnAmt;
        }
        s.updateLastHarvest(collection, _msgSender(), tokenId);

        emit RewardsHarvested(_msgSender(), collection, reward, burnAmt);
    }

    function unstake(address collection, uint256 tokenId) external whenNotPaused nonReentrant {
        StakingLib.StakeInfo memory info = s.stakeLog[collection][_msgSender()][tokenId];
        if (!info.currentlyStaked) revert NotStaked();
        if (!info.isPermanent && block.number < info.unstakeDeadlineBlock) revert TermNotExpired();

        // harvest pending first
        uint256 reward = s.pendingRewards(collection, _msgSender(), tokenId, numberOfBlocksPerRewardUnit);
        if (reward > 0) {
            uint256 burnAmt = (reward * initialHarvestBurnFeeRate) / 100;
            _mint(_msgSender(), reward);
            if (burnAmt > 0) {
                _burn(_msgSender(), burnAmt);
                burnedCatalystByAddress[_msgSender()] += burnAmt;
            }
            s.updateLastHarvest(collection, _msgSender(), tokenId);
            emit RewardsHarvested(_msgSender(), collection, reward, burnAmt);
        }

        // unstake burn fee (flat)
        if (unstakeBurnFee > 0) {
            if (balanceOf(_msgSender()) < unstakeBurnFee) revert Insufficient();
            _splitFeeFromSender(_msgSender(), unstakeBurnFee);
        }

        s.recordUnstake(collection, _msgSender(), tokenId, rewardRateIncrementPerNFT);

        // transfer NFT back
        IERC721(collection).safeTransferFrom(address(this), _msgSender(), tokenId);
        emit NFTUnstaked(_msgSender(), collection, tokenId);
    }

    // -------- Blue-chip (non-custodial) --------
    // Admin can flag/unflag collections as blue-chip
    function setBluechipCollection(address collection, bool isBluechip) external onlyRole(CONTRACT_ADMIN_ROLE) {
        if (collection == address(0)) revert ZeroAddress();
        b.isBluechipCollection[collection] = isBluechip;
    }

    /// @notice One-time per-wallet enrollment to earn on ANY blue-chip collection they own.
    /// Uses uniform fee equal to `collectionRegistrationFee` for consistency.
    function enrollBluechip() external whenNotPaused nonReentrant {
        uint256 fee = collectionRegistrationFee;
        BluechipLib.enroll(
            b,
            address(0),                 // collection not needed for per-wallet fee; enrollment is global
            _msgSender(),
            block.number,
            fee,
            _splitFeeFromSender         // fee splitter (payer, amount)
        );
    }

    /// @notice Harvest blue-chip rewards for a specific collection (non-custodial).
    /// Requires the wallet to be enrolled and to still own at least one token in `collection`.
    function harvestBluechip(address collection) external whenNotPaused nonReentrant {
        if (!b.isBluechipCollection[collection]) revert Ineligible();
        // sanity: must currently hold at least one token (view-only check; reverts if none)
        require(IERC721(collection).balanceOf(_msgSender()) > 0, "no token");

        BluechipLib.harvest(
            b,
            collection,
            _msgSender(),
            block.number,
            s.baseRewardRate,
            numberOfBlocksPerRewardUnit,
            _mintReward
        );
    }

    // -------- Governance wrappers --------
    function propose(
        GovernanceLib.ProposalType pType,
        uint8 paramTarget,
        uint256 newValue,
        address collectionContext
    ) external whenNotPaused returns (bytes32) {
        // light eligibility: must have 1 enrolled blue-chip OR 1 active stake
        (uint256 weight,) = _votingWeight(_msgSender());
        if (weight == 0) revert Ineligible();

        return GovernanceLib.createProposal(
            g,
            pType,
            paramTarget,
            newValue,
            collectionContext,
            _msgSender(),
            block.number
        );
    }

    function vote(bytes32 id) external whenNotPaused {
        (uint256 weight, address attributedCollection) = _votingWeight(_msgSender());
        if (weight == 0) revert Ineligible();
        GovernanceLib.castVote(g, id, _msgSender(), weight, attributedCollection);
    }

    function executeProposal(bytes32 id) external whenNotPaused nonReentrant {
        GovernanceLib.Proposal memory p = GovernanceLib.validateForExecution(g, id);
        GovernanceLib.markExecuted(g, id);

        if (p.pType == GovernanceLib.ProposalType.BASE_REWARD) {
            uint256 old = s.baseRewardRate;
            s.baseRewardRate = p.newValue > maxBaseRewardRate ? maxBaseRewardRate : p.newValue;
            emit BaseRewardRateUpdated(old, s.baseRewardRate);
        } else if (p.pType == GovernanceLib.ProposalType.HARVEST_FEE) {
            uint256 old = initialHarvestBurnFeeRate;
            initialHarvestBurnFeeRate = p.newValue; // expect 0..100
            emit HarvestFeeUpdated(old, p.newValue);
        } else if (p.pType == GovernanceLib.ProposalType.UNSTAKE_FEE) {
            uint256 old = unstakeBurnFee;
            unstakeBurnFee = p.newValue;
            emit UnstakeFeeUpdated(old, p.newValue);
        } else if (p.pType == GovernanceLib.ProposalType.REGISTRATION_FEE_FALLBACK) {
            uint256 old = collectionRegistrationFee;
            collectionRegistrationFee = p.newValue;
            emit RegistrationFeeUpdated(old, p.newValue);
        } else if (p.pType == GovernanceLib.ProposalType.VOTING_PARAM) {
            uint8 t = p.paramTarget;
            if (t == 0) { uint256 old = g.minVotesRequiredScaled; g.minVotesRequiredScaled = p.newValue; emit VotingParamUpdated(t, old, p.newValue); }
            else if (t == 1) { uint256 old = g.votingDurationBlocks; g.votingDurationBlocks = p.newValue; emit VotingParamUpdated(t, old, p.newValue); }
            else if (t == 2) { uint256 old = g.collectionVoteCapPercent; g.collectionVoteCapPercent = p.newValue; emit VotingParamUpdated(t, old, p.newValue); }
            else revert BadParam();
        } else if (p.pType == GovernanceLib.ProposalType.TIER_UPGRADE) {
            // Example hook for future tier changes (blue-chip flags, etc.)
            // kept empty to minimize size; you can extend in an upgrade
        } else {
            revert BadParam();
        }

        emit ProposalExecuted(id, p.newValue);
    }

    function _votingWeight(address voter) internal view returns (uint256 weight, address attributedCollection) {
        // 1) Any active stake older than minStakeAge gives full weight
        for (uint256 i = 0; i < registeredCollections.length; ++i) {
            address coll = registeredCollections[i];
            uint256[] storage port = s.stakePortfolioByUser[coll][voter];
            if (port.length == 0) continue;
            for (uint256 j = 0; j < port.length; ++j) {
                StakingLib.StakeInfo storage si = s.stakeLog[coll][voter][port[j]];
                if (si.currentlyStaked && block.number >= si.stakeBlock + minStakeAgeForVoting) {
                    return (WEIGHT_SCALE, coll);
                }
            }
        }
        // 2) Or: enrolled blue-chip + currently owns at least one token in a flagged collection
        // attribute weight to the first collection found
        for (uint256 i = 0; i < registeredCollections.length; ++i) {
            address coll = registeredCollections[i];
            if (b.isBluechipCollection[coll] && b.bluechipWallets[coll][voter].enrolled) {
                if (IERC721(coll).balanceOf(voter) > 0) {
                    return (WEIGHT_SCALE, coll);
                }
            }
        }
        return (0, address(0));
    }

    // -------- Fee split, treasury, helpers --------
    function _splitFeeFromSender(address payer, uint256 amount) internal {
        if (amount == 0) return;
        uint256 burnAmt = (amount * BURN_BP) / BP_DENOM;
        uint256 treasuryAmt = (amount * TREASURY_BP) / BP_DENOM;
        uint256 deployerAmt = amount - burnAmt - treasuryAmt;

        _burn(payer, burnAmt);
        if (treasuryAmt > 0) {
            _transfer(payer, address(this), treasuryAmt);
            treasuryBalance += treasuryAmt;
            emit TreasuryDeposit(payer, treasuryAmt);
        }
        if (deployerAmt > 0) {
            _transfer(payer, deployerAddress, deployerAmt);
        }
    }

    function withdrawTreasury(address to, uint256 amount)
        external
        onlyRole(CONTRACT_ADMIN_ROLE)
        whenNotPaused
        nonReentrant
    {
        if (to == address(0)) revert ZeroAddress();
        if (amount > treasuryBalance) revert Insufficient();
        treasuryBalance -= amount;
        _transfer(address(this), to, amount);
        emit TreasuryWithdrawal(to, amount);
    }

    function _mintReward(address to, uint256 amount) internal {
        if (amount == 0) return;
        _mint(to, amount);
    }

    // -------- Views --------
    function stakingStats() external view returns (
        uint256 totalAll,
        uint256 totalTerm,
        uint256 totalPermanent,
        uint256 remainingGlobal,
        uint256 remainingTerm,
        uint256 remainingPermanent
    ) {
        totalAll = s.totalStakedAll;
        totalTerm = s.totalStakedTerm;
        totalPermanent = s.totalStakedPermanent;
        remainingGlobal = GLOBAL_CAP > totalAll ? GLOBAL_CAP - totalAll : 0;
        remainingTerm = TERM_CAP > totalTerm ? TERM_CAP - totalTerm : 0;
        remainingPermanent = PERM_CAP > totalPermanent ? PERM_CAP - totalPermanent : 0;
    }

    function pendingRewardsView(address collection, address owner, uint256 tokenId)
        external
        view
        returns (uint256)
    {
        return s.pendingRewards(collection, owner, tokenId, numberOfBlocksPerRewardUnit);
    }

    // -------- ERC721 Receiver / Pause / UUPS --------
    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {
        return this.onERC721Received.selector;
    }

    function pause() external onlyRole(CONTRACT_ADMIN_ROLE) { _pause(); }
    function unpause() external onlyRole(CONTRACT_ADMIN_ROLE) { _unpause(); }

    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}

    uint256[50] private __gap;
}
