<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Catalyst DApp — Full Dashboard v2</title>

<!-- Ethers v6 (UMD) -->
<script src="https://cdn.jsdelivr.net/npm/ethers@6.13.2/dist/ethers.umd.min.js"></script>

<style>
  :root { --bg:#0f1220; --card:#171a2b; --muted:#9aa3b2; --text:#e7ecf4; --acc:#6ee7ff; --line:#232744; }
  * { box-sizing:border-box; }
  html,body { height:100%; }
  body { margin:0; font-family:system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial; background:var(--bg); color:var(--text); }
  header { padding:16px 20px; border-bottom:1px solid #20243a; display:flex; gap:12px; align-items:center; flex-wrap:wrap; position:sticky; top:0; background:linear-gradient(180deg, rgba(15,18,32,0.98), rgba(15,18,32,0.92)); backdrop-filter:saturate(120%) blur(6px); z-index:10; }
  header h1 { font-size:18px; margin:0; opacity:.95; }
  .pill { background:var(--card); padding:8px 10px; border-radius:10px; border:1px solid var(--line); display:flex; gap:8px; align-items:center; }
  input, select, button, textarea { background:#0c0f1c; color:var(--text); border:1px solid #27304a; border-radius:10px; padding:10px 12px; outline:none; }
  input, select, textarea { width:100%; }
  button { cursor:pointer; font-weight:600; }
  button.primary { background:#132a39; border-color:#1e3a53; }
  button.ghost { background:transparent; border:1px dashed #2a3154; }
  button:disabled { opacity:.6; cursor:not-allowed; }
  main { max-width:1280px; margin:18px auto 80px; padding:0 16px; }
  .hero { margin-bottom:14px; background:linear-gradient(180deg, rgba(19,42,57,0.35), transparent); border:1px solid var(--line); border-radius:16px; padding:14px 16px; display:flex; gap:12px; align-items:center; justify-content:space-between; flex-wrap:wrap; }
  .hero .msg { max-width:740px; font-size:14px; color:#cfe6ff; }
  .grid { display:grid; gap:16px; grid-template-columns:repeat(12,1fr); align-items:start; }
  .card { grid-column:span 12; background:var(--card); border:1px solid var(--line); border-radius:16px; padding:16px; }
  @media(min-width:1100px){
    .span7 { grid-column:span 7; }
    .span5 { grid-column:span 5; }
    .span6 { grid-column:span 6; }
    .span4 { grid-column:span 4; }
  }
  .row { display:grid; gap:10px; grid-template-columns:1fr 1fr; }
  .row3 { display:grid; gap:10px; grid-template-columns:1fr 1fr 1fr; }
  .label { font-size:12px; color:var(--muted); margin-bottom:6px; }
  .muted { color:var(--muted); }
  .hr { height:1px; background:var(--line); margin:14px 0; }
  details { border:1px dashed #2a3154; border-radius:12px; padding:10px 12px; }
  summary { cursor:pointer; font-weight:600; }
  code.inline { background:#0c0f1c; padding:2px 6px; border-radius:6px; border:1px solid #27304a; }
  .tabbar { display:flex; gap:6px; flex-wrap:wrap; margin-bottom:10px; }
  .tabbar button { background:transparent; border:1px solid #27304a; }
  .tabbar button.active { background:#132a39; border-color:#1e3a53; }
  .warn { color:#ffd166; }
  .ok { color:#86efac; }
  .err { color:#ff8a8a; }
  .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace; }
  .kv { display:grid; grid-template-columns: 210px 1fr; gap:8px; }
  .flex { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
  .list { border:1px dashed var(--line); border-radius:12px; padding:10px 12px; max-height:280px; overflow:auto; }
  .list .item { padding:6px 8px; border-bottom:1px dashed #2a3154; font-size:12px; }
  .list .item:last-child { border-bottom:0; }
  .badge { display:inline-flex; align-items:center; gap:6px; font-size:12px; padding:4px 8px; border-radius:999px; background:#132a39; border:1px solid #1e3a53; }
  .right-card h3 { margin:0 0 6px 0; }
  .mini { font-size:12px; opacity:.9; }
  .tooltip { text-decoration: underline dotted; cursor:help; }
</style>
</head>
<body>
<header>
  <h1>⚗️ Catalyst DApp</h1>

  <div class="pill">
    <span class="muted">RPC (read-only)</span>
    <input id="rpcUrl" placeholder="(optional) e.g. https://mainnet.infura.io/v3/…"
           style="min-width:320px" />
    <button id="saveRpc" class="primary">Use RPC</button>
  </div>

  <div class="pill">
    <span class="muted">Contract</span>
    <input id="contractAddress" placeholder="0x… (CatalystNFTStakingUpgradeable)" style="min-width:320px" />
    <button class="primary" id="saveContractBtn">Save</button>
  </div>

<div class="pill">
  <span id="acct" class="mono muted">Not connected</span>
  <button id="walletBtn" class="primary">Connect</button>
</div>
</header>

<main>
  <div class="hero">
    <div class="msg">
      <strong>Welcome to Catalyst.</strong> Stake ERC-721s (custodial or blue-chip non-custodial), harvest rewards, vote on parameters, and manage guardian councils.
      Reads use your RPC (no wallet popups); writes require your wallet signature. Hover labels for quick tips.
    </div>
    <div class="flex">
      <span class="badge" title="Reads = RPC, Writes = Wallet">
        <span>Mode</span><span class="mono" id="modeBadge">read-only</span>
      </span>
      <span class="badge" title="Network from the connected wallet">
        <span>Network</span><span class="mono" id="netBadge">—</span>
      </span>
    </div>
  </div>

  <div class="grid">
    <!-- LEFT: Tabs -->
    <section class="card span7">
      <div class="tabbar">
        <button data-tab="stake" class="active">Stake</button>
        <button data-tab="bluechip">Blue-Chip</button>
        <button data-tab="governance">Governance</button>
        <button data-tab="guardians">Guardians</button>
        <button data-tab="admin">Admin</button>
        <button data-tab="views">Views</button>
      </div>

      <!-- Stake Tab -->
      <div class="tab" id="tab-stake" style="display:block">
        <h3 style="margin-top:0">Custodial Staking</h3>
        <div class="row">
          <div>
            <div class="label tooltip" title="ERC-721 collection address">Collection (ERC-721)</div>
            <input id="colStake" placeholder="0x…">
          </div>
          <div>
            <div class="label tooltip" title="NFT tokenId inside the collection">Token ID</div>
            <input id="tidStake" type="number" placeholder="e.g. 123">
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div>
            <div class="label tooltip" title="Permanent stakes may have different fees/limits">Stake Type</div>
            <select id="permanent">
              <option value="false">Term</option>
              <option value="true">Permanent</option>
            </select>
          </div>
          <div>
            <div class="label tooltip" title="Grant the staking contract permission to move your NFTs">Approve NFT (setApprovalForAll)</div>
            <button id="btnApprove721">Approve</button>
          </div>
        </div>
        <div class="flex" style="margin-top:10px">
          <button class="primary" id="btnStake">Stake</button>
          <button id="btnHarvestOne">Harvest</button>
          <button id="btnUnstake">Unstake</button>
          <button id="btnViewPending">View Pending</button>
          <span id="pendingView" class="mono muted">—</span>
        </div>

        <div class="hr"></div>

        <details>
          <summary>Batch stake (≤50)</summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Collection</div>
              <input id="colBatch" placeholder="0x…">
            </div>
            <div>
              <div class="label">Token IDs (comma-separated)</div>
              <input id="tidsBatch" placeholder="1,2,3">
            </div>
          </div>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Stake Type</div>
              <select id="permanentBatch">
                <option value="false">Term</option>
                <option value="true">Permanent</option>
              </select>
            </div>
            <div>
              <div class="label">Approve</div>
              <button id="btnApprove721Batch">Approve Batch</button>
            </div>
          </div>
          <div style="margin-top:10px">
            <button class="primary" id="btnBatchStake">Batch Stake</button>
          </div>
        </details>

        <div class="hr"></div>

        <h3>Register Collection</h3>
        <div class="row">
          <div>
            <div class="label tooltip" title="Collections can self-register if allowed">Collection</div>
            <input id="colRegister" placeholder="0x…">
          </div>
          <div>
            <div class="label tooltip" title="Upper bound supply used for safety checks">Declared Max Supply (≤ 20,000)</div>
            <input id="declaredSupply" type="number" placeholder="e.g. 10000">
          </div>
        </div>
        <div style="margin-top:10px">
          <button id="btnRegister" class="primary">Register</button>
        </div>
      </div>

      <!-- Bluechip Tab -->
      <div class="tab" id="tab-bluechip" style="display:none">
        <h3 style="margin-top:0">Blue-Chip (Non-custodial)</h3>
        <div class="row">
          <div>
            <div class="label">Enroll Blue-Chip (one-time per wallet)</div>
            <button class="primary" id="btnEnrollBlue">Enroll</button>
          </div>
          <div>
            <div class="label">Harvest Blue-Chip — Collection</div>
            <input id="colBlueHarvest" placeholder="0x…">
          </div>
        </div>
        <div class="flex" style="margin-top:10px">
          <button id="btnHarvestBlue">Harvest Blue-Chip</button>
        </div>

        <div class="hr"></div>

        <details>
          <summary>Admin: Flag / Unflag Blue-Chip Collection</summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Collection</div>
              <input id="colFlagBlue" placeholder="0x…">
            </div>
            <div>
              <div class="label">Status</div>
              <select id="isBlueFlag">
                <option value="true">Flag as Blue-Chip</option>
                <option value="false">Remove Blue-Chip</option>
              </select>
            </div>
          </div>
          <div style="margin-top:10px">
            <button id="btnSetBlue" class="primary">Set Blue-Chip</button>
          </div>
        </details>
      </div>

      <!-- Governance Tab -->
      <div class="tab" id="tab-governance" style="display:none">
        <h3 style="margin-top:0">Governance</h3>
        <div class="row">
          <div>
            <div class="label">Proposal Type</div>
            <select id="pType">
              <option value="0">BASE_REWARD</option>
              <option value="1">HARVEST_FEE</option>
              <option value="2">UNSTAKE_FEE</option>
              <option value="3">REGISTRATION_FEE_FALLBACK</option>
              <option value="4">VOTING_PARAM</option>
              <option value="5">TIER_UPGRADE</option>
            </select>
          </div>
          <div>
            <div class="label">Param Target (for VOTING_PARAM)</div>
            <input id="paramTarget" type="number" value="0">
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div>
            <div class="label">New Value (uint256)</div>
            <input id="newValue" type="number" placeholder="e.g. 1000">
          </div>
          <div>
            <div class="label">Collection Context (optional)</div>
            <input id="collCtx" placeholder="0x… or 0x0000…">
          </div>
        </div>
        <div style="margin-top:10px">
          <button class="primary" id="btnPropose">Create Proposal</button>
        </div>

        <div class="hr"></div>

        <div class="row">
          <div>
            <div class="label">Proposal ID (bytes32)</div>
            <input id="propId" placeholder="0x…">
          </div>
          <div>
            <div class="label">—</div>
            <button id="btnVote">Vote</button>
          </div>
        </div>
        <div style="margin-top:10px">
          <button id="btnExecute">Execute</button>
        </div>

        <div class="hr"></div>

        <details open>
          <summary>Proposals (scan events)</summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">From Block</div>
              <input id="fromBlock" type="number" placeholder="e.g. 0">
            </div>
            <div>
              <div class="label">To Block (optional)</div>
              <input id="toBlock" type="number" placeholder="latest">
            </div>
          </div>
          <div class="flex" style="margin-top:10px">
            <button class="ghost" id="btnScanProposals">Scan ProposalCreated</button>
          </div>
          <div id="proposalsList" class="list" style="margin-top:10px"></div>
          <div class="mini muted">Notes: scans logs for <span class="mono">ProposalCreated</span>. If your ABI/event name differs, update <span class="mono">EVENTS.PROPOSAL_CREATED</span> below.</div>
        </details>
      </div>

      <!-- Guardians Tab -->
      <div class="tab" id="tab-guardians" style="display:none">
        <h3 style="margin-top:0">Guardian Councils</h3>

        <details open>
          <summary><strong>Deployer Council (7:5)</strong></summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Proposed New Deployer</div>
              <input id="newDeployer" placeholder="0x…">
            </div>
            <div>
              <div class="label">Actions</div>
              <div class="flex">
                <button class="primary" id="btnPropDep">Propose</button>
                <button id="btnApproveDep">Approve</button>
                <button id="btnExecDep">Execute</button>
              </div>
            </div>
          </div>
        </details>

        <div class="hr"></div>

        <details open>
          <summary><strong>Admin Council (7:5)</strong></summary>
          <div class="row" style="margin-top:10px">
            <div>
              <div class="label">Proposed New Admin</div>
              <input id="newAdmin" placeholder="0x…">
            </div>
            <div>
              <div class="label">Actions</div>
              <div class="flex">
                <button class="primary" id="btnPropAdm">Propose</button>
                <button id="btnApproveAdm">Approve</button>
                <button id="btnExecAdm">Execute</button>
              </div>
            </div>
          </div>
        </details>

        <div class="hr"></div>

        <details>
          <summary>Advanced: Set/Replace Guardians (Admin)</summary>
          <div class="row3" style="margin-top:10px">
            <div>
              <div class="label">Deployer idx (0–6)</div>
              <input id="depIdx" type="number" placeholder="0">
            </div>
            <div>
              <div class="label">Guardian Address</div>
              <input id="depGuardian" placeholder="0x…">
            </div>
            <div>
              <div class="label">—</div>
              <button id="btnSetDepGuardian" class="primary">Set Deployer Guardian</button>
            </div>
          </div>
          <div class="row3" style="margin-top:10px">
            <div>
              <div class="label">Admin idx (0–6)</div>
              <input id="admIdx" type="number" placeholder="0">
            </div>
            <div>
              <div class="label">Guardian Address</div>
              <input id="admGuardian" placeholder="0x…">
            </div>
            <div>
              <div class="label">—</div>
              <button id="btnSetAdmGuardian" class="primary">Set Admin Guardian</button>
            </div>
          </div>
        </details>

        <div class="hr"></div>

        <div class="flex">
          <button id="btnListGuardians" class="ghost">List Guardians</button>
        </div>
        <div id="guardiansList" class="list" style="margin-top:10px"></div>
      </div>

      <!-- Admin Tab -->
      <div class="tab" id="tab-admin" style="display:none">
        <h3 style="margin-top:0">Admin Controls</h3>
        <div class="flex">
          <button id="btnPause">Pause</button>
          <button id="btnUnpause">Unpause</button>
        </div>

        <div class="hr"></div>

        <h4>Treasury</h4>
        <div class="row">
          <div>
            <div class="label">Withdraw → Address</div>
            <input id="toTreasury" placeholder="0x…">
          </div>
          <div>
            <div class="label">Amount (wei)</div>
            <input id="amtTreasury" type="number" placeholder="1000000000000000000">
          </div>
        </div>
        <div style="margin-top:10px">
          <button id="btnWithdraw" class="primary">Withdraw Treasury</button>
        </div>
      </div>

      <!-- Views Tab -->
      <div class="tab" id="tab-views" style="display:none">
        <h3 style="margin-top:0">Read-Only Helpers</h3>
        <div class="row">
          <div>
            <div class="label">Pending Rewards: Collection</div>
            <input id="vCol" placeholder="0x…">
          </div>
          <div>
            <div class="label">Owner</div>
            <input id="vOwner" placeholder="0x… (defaults to your address)">
          </div>
        </div>
        <div class="row" style="margin-top:10px">
          <div>
            <div class="label">Token ID</div>
            <input id="vTokenId" type="number" placeholder="123">
          </div>
          <div>
            <div class="label">—</div>
            <button id="btnViewPending2" class="primary">View Pending</button>
          </div>
        </div>
        <div style="margin-top:8px" class="mono muted" id="pendingOut">—</div>
      </div>
    </section>

    <!-- RIGHT: Insights (Stats + User/Collection panels + Lists) -->
    <section class="card span5 right-card">
      <div class="flex" style="justify-content:space-between; align-items:center">
        <h3>Protocol Stats</h3>
        <div class="flex">
          <button id="btnRefresh" class="primary">Refresh</button>
          <label class="muted" style="display:flex; align-items:center; gap:6px">
            <input type="checkbox" id="autoRefresh" />
            Auto
          </label>
        </div>
      </div>

      <div id="stats" class="mono">
        <div class="kv">
          <div>totalAll</div><div id="st_totalAll">—</div>
          <div>totalTerm</div><div id="st_totalTerm">—</div>
          <div>totalPermanent</div><div id="st_totalPermanent">—</div>
          <div>remainingGlobal</div><div id="st_remainingGlobal">—</div>
          <div>remainingTerm</div><div id="st_remainingTerm">—</div>
          <div>remainingPermanent</div><div id="st_remainingPermanent">—</div>
          <div>treasuryBalance</div><div id="st_treasury">—</div>
          <div>deployerAddress</div><div id="st_deployer">—</div>
          <div>paused</div><div id="st_paused">—</div>
        </div>
      </div>

      <div class="hr"></div>

      <h3>User Info</h3>
      <div class="row">
        <div>
          <div class="label">User Address</div>
          <input id="infoUser" placeholder="0x… (leave blank for your wallet)">
        </div>
        <div>
          <div class="label">Collection</div>
          <input id="infoCol" placeholder="0x…">
        </div>
      </div>
      <div class="row" style="margin-top:10px">
        <div>
          <div class="label">Token ID</div>
          <input id="infoToken" type="number" placeholder="e.g. 0">
        </div>
        <div>
          <div class="label">—</div>
          <button id="btnUserInfo" class="ghost">Get User Info</button>
        </div>
      </div>
      <div class="kv mono" style="margin-top:8px">
        <div>Address</div><div id="ui_addr">—</div>
        <div>Collection</div><div id="ui_col">—</div>
        <div>Pending Rewards</div><div id="ui_rewards">—</div>
      </div>

      <div class="hr"></div>

      <h3>Collection Info</h3>
      <div class="row">
        <div>
          <div class="label">Collection</div>
          <input id="ci_col" placeholder="0x…">
        </div>
        <div>
          <div class="label">—</div>
          <button id="btnColInfo" class="ghost">Get Collection Info</button>
        </div>
      </div>
      <div class="kv mono" style="margin-top:8px">
        <div>Address</div><div id="ci_addr">—</div>
        <div>Index</div><div id="ci_idx">—</div>
        <div>Blue-Chip?</div><div id="ci_blue">—</div>
      </div>

      <div class="hr"></div>

      <h3>Registered Collections</h3>
      <div class="row">
        <div>
          <div class="label">Max Index to Scan</div>
          <input id="scanMax" type="number" placeholder="e.g. 200">
        </div>
        <div>
          <div class="label">—</div>
          <button id="btnScanCollections" class="ghost">Scan</button>
        </div>
      </div>
      <div id="collectionsList" class="list" style="margin-top:10px"></div>

      <div class="hr"></div>

      <h3 style="margin:0 0 6px 0">Console</h3>
      <div id="log" class="mono" style="font-size:12px; white-space:pre-wrap; min-height:160px"></div>
    </section>
  </div>
</main>

<script>
/** =========================
 * CONFIG & CONSTANTS
 * ======================= */
const ABI_URL = "../abi/CatalystNFTStakingUpgradeable.json";
const DEFAULT_CONTRACT = "";
const DEFAULT_RPC = "";

/** Events (update names/signatures to match your contract if needed) */
const EVENTS = {
  PROPOSAL_CREATED: "event ProposalCreated(bytes32 indexed id, uint8 pType, uint8 paramTarget, uint256 newValue, address collectionContext, address proposer)"
};

// Minimal ERC721 ABI for approvals
const ERC721_ABI = [
  "function setApprovalForAll(address operator, bool approved)",
  "function isApprovedForAll(address owner, address operator) view returns (bool)"
];

/** State */
let READ_PROVIDER = null;
let WALLET_PROVIDER = null;
let SIGNER = null;
let USER_ADDR = null;

let ABI = null;
let IFACE = null;
let READ_CONTRACT = null;
let WRITE_CONTRACT = null;
let CONTRACT_ADDR = "";

let refreshTimer = null;

/** =========================
 * DOM SHORTCUTS & LOGGING
 * ======================= */
const $ = (id) => document.getElementById(id);
const log = (msg, cls="") => {
  const el = $("log");
  const line = document.createElement("div");
  if (cls) line.className = cls;
  line.textContent = `[${new Date().toLocaleTimeString()}] ${msg}`;
  el.prepend(line);
};

/** =========================
 * ABI LOADER
 * ======================= */
async function loadABI() {
  if (ABI) return ABI;
  const res = await fetch(ABI_URL, { cache: "no-store" });
  if (!res.ok) throw new Error(`Failed to load ABI JSON from ${ABI_URL}`);
  const json = await res.json();
  ABI = Array.isArray(json) ? json : (json.abi || json.ABI || json.default || json);
  if (!Array.isArray(ABI)) throw new Error("ABI JSON not in expected format");
  IFACE = new ethers.Interface([
    ...ABI,
    // Ensure events we want to decode exist (no-op if duplicates)
    EVENTS.PROPOSAL_CREATED
  ]);
  log(`ABI loaded (${ABI.length} entries)`, "ok");
  return ABI;
}

/** =========================
 * PROVIDERS (READ / WRITE)
 * ======================= */
async function setupReadProvider(customRpc) {
  try {
    READ_PROVIDER = customRpc
      ? new ethers.JsonRpcProvider(customRpc)
      : ethers.getDefaultProvider();
    $("modeBadge").textContent = "read-only";
    log(`Read provider set${customRpc ? " (custom RPC)" : " (default)"}`, "ok");
  } catch (e) {
    log(`Failed to set read provider: ${e.message || e}`, "err");
    READ_PROVIDER = null;
  }
}

async function connectWallet() {
  if (!window.ethereum) throw new Error("No injected wallet found");
  WALLET_PROVIDER = new ethers.BrowserProvider(window.ethereum);
  await WALLET_PROVIDER.send("eth_requestAccounts", []);
  SIGNER = await WALLET_PROVIDER.getSigner();
  USER_ADDR = await SIGNER.getAddress();
  $("acct").textContent = USER_ADDR;
  $("modeBadge").textContent = "read + write";
  try {
    const net = await WALLET_PROVIDER.getNetwork();
    $("netBadge").textContent = net?.name || String(net?.chainId || "—");
  } catch {}
  log(`Wallet connected: ${USER_ADDR}`, "ok");
}

/** =========================
 * CONTRACT INIT
 * ======================= */
function saveContractAddress(addr) {
  localStorage.setItem("catalyst_contract", addr);
  $("contractAddress").value = addr;
  CONTRACT_ADDR = addr;
  log(`Saved contract address: ${addr}`, "ok");
}

function getSavedAddress() {
  return localStorage.getItem("catalyst_contract") || DEFAULT_CONTRACT;
}

async function initReadContract() {
  if (!CONTRACT_ADDR) throw new Error("Contract address is empty");
  if (!READ_PROVIDER) await setupReadProvider(localStorage.getItem("catalyst_rpc") || DEFAULT_RPC);
  await loadABI();
  READ_CONTRACT = new ethers.Contract(CONTRACT_ADDR, ABI, READ_PROVIDER);
  return READ_CONTRACT;
}

async function initWriteContract() {
  if (!SIGNER) await connectWallet();
  if (!CONTRACT_ADDR) throw new Error("Contract address is empty");
  await loadABI();
  WRITE_CONTRACT = new ethers.Contract(CONTRACT_ADDR, ABI, SIGNER);
  return WRITE_CONTRACT;
}

/** =========================
 * HELPERS
 * ======================= */
function parseAddress(v) {
  const s = (v || "").trim();
  if (!ethers.isAddress(s)) throw new Error("Invalid address");
  return s;
}
function parseMaybeAddress(v) {
  const s = (v || "").trim();
  return ethers.isAddress(s) ? s : null;
}
function parseUint(v, fallback=0n) {
  const s = (v ?? "").toString().trim();
  if (!s) return BigInt(fallback);
  return BigInt(s);
}
function parseIdsCSV(csv) {
  return (csv || "")
    .split(",")
    .map(s => s.trim())
    .filter(Boolean)
    .map(s => BigInt(s));
}

/** =========================
 * STATS (READ-ONLY)
 * ======================= */
async function refreshStats() {
  try {
    await initReadContract();
    const s = await READ_CONTRACT.stakingStats();
    $("st_totalAll").textContent = s.totalAll?.toString?.() ?? s[0]?.toString?.() ?? "—";
    $("st_totalTerm").textContent = s.totalTerm?.toString?.() ?? s[1]?.toString?.() ?? "—";
    $("st_totalPermanent").textContent = s.totalPermanent?.toString?.() ?? s[2]?.toString?.() ?? "—";
    $("st_remainingGlobal").textContent = s.remainingGlobal?.toString?.() ?? s[3]?.toString?.() ?? "—";
    $("st_remainingTerm").textContent = s.remainingTerm?.toString?.() ?? s[4]?.toString?.() ?? "—";
    $("st_remainingPermanent").textContent = s.remainingPermanent?.toString?.() ?? s[5]?.toString?.() ?? "—";

    const tb = await READ_CONTRACT.treasuryBalance?.().catch(()=>null);
    $("st_treasury").textContent = tb!=null ? tb.toString() : "—";

    const dep = await READ_CONTRACT.deployerAddress?.().catch(()=>null);
    $("st_deployer").textContent = dep || "—";

    const isPaused = await READ_CONTRACT.paused?.().catch(()=>null);
    $("st_paused").textContent = (isPaused===true || isPaused===false) ? String(isPaused) : "—";

    log("Stats refreshed ✅", "ok");
  } catch (e) {
    log(`Stats error: ${e.message || e}`, "err");
  }
}

function toggleAutoRefresh(on) {
  if (refreshTimer) {
    clearInterval(refreshTimer);
    refreshTimer = null;
  }
  if (on) refreshTimer = setInterval(refreshStats, 8000);
}

/** =========================
 * STARTUP + HEADER
 * ======================= */
window.addEventListener("load", async () => {
  const savedRpc = localStorage.getItem("catalyst_rpc") || DEFAULT_RPC;
  $("rpcUrl").value = savedRpc;
  await setupReadProvider(savedRpc);

  const saved = getSavedAddress();
  if (saved) {
    $("contractAddress").value = saved;
    CONTRACT_ADDR = saved;
  }

  // Tabs
  document.querySelectorAll(".tabbar button").forEach(btn=>{
    btn.onclick = () => {
      document.querySelectorAll(".tabbar button").forEach(b=>b.classList.remove("active"));
      btn.classList.add("active");
      const key = btn.dataset.tab;
      document.querySelectorAll(".tab").forEach(t=>t.style.display="none");
      $("tab-" + key).style.display="block";
    };
  });

  updateWalletButton(); // sync button on load
  log("Ready. Set RPC (optional), enter contract, and connect wallet for writes.");
});

$("saveContractBtn").onclick = () => {
  try { saveContractAddress($("contractAddress").value.trim()); }
  catch(e){ log(e.message || e, "err"); }
};

$("saveRpc").onclick = async () => {
  const url = $("rpcUrl").value.trim();
  localStorage.setItem("catalyst_rpc", url);
  await setupReadProvider(url);
  if (CONTRACT_ADDR) {
    try { await initReadContract(); log("Read contract re-initialized with new RPC", "ok"); }
    catch(e){ log(e.message || e, "err"); }
  }
};

// --- Wallet helpers ---
function updateWalletButton() {
  if (USER_ADDR) {
    $("walletBtn").textContent = "Disconnect";
    $("acct").textContent = USER_ADDR;
  } else {
    $("walletBtn").textContent = "Connect";
    $("acct").textContent = "Not connected";
  }
}

async function connectWallet() {
  if (!window.ethereum) throw new Error("No injected wallet found");
  WALLET_PROVIDER = new ethers.BrowserProvider(window.ethereum);
  await WALLET_PROVIDER.send("eth_requestAccounts", []);
  SIGNER = await WALLET_PROVIDER.getSigner();
  USER_ADDR = await SIGNER.getAddress();
  log(`Wallet connected: ${USER_ADDR}`, "ok");
  updateWalletButton();
}

$("walletBtn").onclick = async () => {
  try {
    if (!USER_ADDR) {
      // CONNECT
      await connectWallet();
    } else {
      // DISCONNECT
      USER_ADDR = null;
      SIGNER = null;
      WRITE_CONTRACT = null;
      log("Wallet disconnected", "warn");
      updateWalletButton();
    }
  } catch (e) {
    log(e.message || e, "err");
  }
};

/** ---- Stats panel ---- */
$("btnRefresh").onclick = refreshStats;
$("autoRefresh").onchange = (e) => toggleAutoRefresh(e.target.checked);

/** =========================
 * STAKE TAB ACTIONS
 * ======================= */
$("btnApprove721").onclick = async () => {
  try {
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const nft = new ethers.Contract(col, ERC721_ABI, SIGNER);
    const tx = await nft.setApprovalForAll(CONTRACT_ADDR, true);
    log(`Approve tx: ${tx.hash}`);
    await tx.wait();
    log("Approved setApprovalForAll ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnStake").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const permanent = $("permanent").value === "true";
    const tx = await WRITE_CONTRACT.stake(col, id, permanent);
    log(`Stake sent: ${tx.hash}`); await tx.wait(); log("Stake confirmed ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnHarvestOne").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const tx = await WRITE_CONTRACT.harvest(col, id);
    log(`Harvest sent: ${tx.hash}`); await tx.wait(); log("Harvest confirmed ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnUnstake").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const tx = await WRITE_CONTRACT.unstake(col, id);
    log(`Unstake sent: ${tx.hash}`); await tx.wait(); log("Unstake confirmed ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnViewPending").onclick = async () => {
  try{
    await initReadContract();
    const col = parseAddress($("colStake").value);
    const id = parseUint($("tidStake").value);
    const owner = USER_ADDR || $("acct").textContent;
    const addr = ethers.isAddress(owner) ? owner : (()=>{ throw new Error("Connect wallet or enter owner (Views tab)"); })();
    const r = await READ_CONTRACT.pendingRewardsView(col, addr, id);
    $("pendingView").textContent = r.toString();
    log("Pending rewards fetched ✅","ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnApprove721Batch").onclick = async () => {
  try {
    await initWriteContract();
    const col = parseAddress($("colBatch").value);
    const nft = new ethers.Contract(col, ERC721_ABI, SIGNER);
    const tx = await nft.setApprovalForAll(CONTRACT_ADDR, true);
    log(`Approve batch tx: ${tx.hash}`); await tx.wait(); log("Approved ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnBatchStake").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colBatch").value);
    const ids = parseIdsCSV($("tidsBatch").value);
    if (ids.length === 0) throw new Error("No token ids");
    const permanent = $("permanentBatch").value === "true";
    const tx = await WRITE_CONTRACT.batchStake(col, ids, permanent);
    log(`Batch stake: ${tx.hash}`); await tx.wait(); log("Batch stake confirmed ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnRegister").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colRegister").value);
    const supply = parseUint($("declaredSupply").value);
    const tx = await WRITE_CONTRACT.registerCollection(col, supply);
    log(`Register sent: ${tx.hash}`); await tx.wait(); log("Collection registered ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

/** =========================
 * BLUE-CHIP TAB
 * ======================= */
$("btnEnrollBlue").onclick = async () => {
  try{
    await initWriteContract();
    const tx = await WRITE_CONTRACT.enrollBluechip();
    log(`Enroll sent: ${tx.hash}`); await tx.wait(); log("Enrolled ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnHarvestBlue").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colBlueHarvest").value);
    const tx = await WRITE_CONTRACT.harvestBluechip(col);
    log(`Harvest blue-chip: ${tx.hash}`); await tx.wait(); log("Blue-chip harvested ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnSetBlue").onclick = async () => {
  try{
    await initWriteContract();
    const col = parseAddress($("colFlagBlue").value);
    const isBlue = $("isBlueFlag").value === "true";
    const tx = await WRITE_CONTRACT.setBluechipCollection(col, isBlue);
    log(`Set blue-chip: ${tx.hash}`); await tx.wait(); log("Blue-chip flag updated ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

/** =========================
 * GOVERNANCE TAB
 * ======================= */
$("btnPropose").onclick = async () => {
  try{
    await initWriteContract();
    const pType = Number($("pType").value);
    const paramTarget = Number($("paramTarget").value || "0");
    const newValue = parseUint($("newValue").value);
    const ctx = ($("collCtx").value.trim() || "0x0000000000000000000000000000000000000000");
    const tx = await WRITE_CONTRACT.propose(pType, paramTarget, newValue, ctx);
    log(`Propose sent: ${tx.hash}`);
    await tx.wait();
    log("Proposal created (check explorer logs) ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnVote").onclick = async () => {
  try{
    await initWriteContract();
    const id = $("propId").value.trim();
    const tx = await WRITE_CONTRACT.vote(id);
    log(`Vote sent: ${tx.hash}`); await tx.wait(); log("Voted ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnExecute").onclick = async () => {
  try{
    await initWriteContract();
    const id = $("propId").value.trim();
    const tx = await WRITE_CONTRACT.executeProposal(id);
    log(`Execute sent: ${tx.hash}`); await tx.wait(); log("Executed ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

/** --- Proposal scanning (events) --- */
$("btnScanProposals").onclick = async () => {
  try{
    await initReadContract();
    const fromBlock = Number($("fromBlock").value || "0");
    const toBlockRaw = $("toBlock").value.trim();
    const toBlock = toBlockRaw ? Number(toBlockRaw) : "latest";

    const eventFrag = IFACE.getEvent("ProposalCreated"); // throws if missing
    const topic0 = IFACE.getEventTopic(eventFrag);

    const filter = {
      address: CONTRACT_ADDR,
      topics: [ topic0 ],
      fromBlock: isNaN(fromBlock) ? 0 : fromBlock,
      toBlock
    };
    const logs = await READ_PROVIDER.getLogs(filter);
    const out = $("proposalsList");
    out.innerHTML = "";
    if (!logs.length) {
      out.innerHTML = `<div class="item">No ProposalCreated events in range.</div>`;
      log("No proposals found in range.", "muted");
      return;
    }
    logs.forEach(l=>{
      let row = "";
      try {
        const parsed = IFACE.decodeEventLog(eventFrag, l.data, l.topics);
        const id = parsed.id;
        const pType = Number(parsed.pType);
        const paramTarget = Number(parsed.paramTarget ?? 0);
        const newValue = parsed.newValue?.toString?.() ?? "";
        const ctx = parsed.collectionContext ?? "0x000...0";
        const proposer = parsed.proposer ?? "0x";
        row = `<div class="item"><div class="mono">${l.blockNumber} • id=${id}</div><div class="mini">type=${pType} target=${paramTarget} newValue=${newValue} ctx=${ctx} proposer=${proposer}</div></div>`;
      } catch {
        row = `<div class="item">Block ${l.blockNumber} — (unable to decode)</div>`;
      }
      out.insertAdjacentHTML("beforeend", row);
    });
    log(`Decoded ${logs.length} ProposalCreated logs ✅`, "ok");
  } catch(e){ log(e.message || e, "err"); }
};

/** =========================
 * GUARDIANS TAB
 * ======================= */
$("btnPropDep").onclick = async () => {
  try{
    await initWriteContract();
    const addr = parseAddress($("newDeployer").value);
    const tx = await WRITE_CONTRACT.proposeDeployerRecovery(addr);
    log(`Proposed new deployer: ${tx.hash}`); await tx.wait(); log("Proposal acknowledged ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnApproveDep").onclick = async () => {
  try{
    await initWriteContract();
    const tx = await WRITE_CONTRACT.approveDeployerRecovery();
    log(`Approve deployer: ${tx.hash}`); await tx.wait(); log("Approved ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnExecDep").onclick = async () => {
  try{
    await initWriteContract();
    const tx = await WRITE_CONTRACT.executeDeployerRecovery();
    log(`Execute deployer: ${tx.hash}`); await tx.wait(); log("Deployer recovered ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnPropAdm").onclick = async () => {
  try{
    await initWriteContract();
    const addr = parseAddress($("newAdmin").value);
    const tx = await WRITE_CONTRACT.proposeAdminRecovery(addr);
    log(`Proposed new admin: ${tx.hash}`); await tx.wait(); log("Proposal acknowledged ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnApproveAdm").onclick = async () => {
  try{
    await initWriteContract();
    const tx = await WRITE_CONTRACT.approveAdminRecovery();
    log(`Approve admin: ${tx.hash}`); await tx.wait(); log("Approved ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnExecAdm").onclick = async () => {
  try{
    await initWriteContract();
    const tx = await WRITE_CONTRACT.executeAdminRecovery();
    log(`Execute admin: ${tx.hash}`); await tx.wait(); log("Admin recovered ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnSetDepGuardian").onclick = async () => {
  try{
    await initWriteContract();
    const idx = Number($("depIdx").value || "0");
    const gaddr = parseAddress($("depGuardian").value);
    const tx = await WRITE_CONTRACT.setDeployerGuardian(idx, gaddr);
    log(`Set deployer guardian: ${tx.hash}`); await tx.wait(); log("Deployer guardian set ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};
$("btnSetAdmGuardian").onclick = async () => {
  try{
    await initWriteContract();
    const idx = Number($("admIdx").value || "0");
    const gaddr = parseAddress($("admGuardian").value);
    const tx = await WRITE_CONTRACT.setAdminGuardian(idx, gaddr);
    log(`Set admin guardian: ${tx.hash}`); await tx.wait(); log("Admin guardian set ✅", "ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnListGuardians").onclick = async () => {
  try{
    await initReadContract();
    const out = $("guardiansList");
    out.innerHTML = "";
    const rows = [];
    for (let i=0;i<7;i++){
      const d = await READ_CONTRACT.deployerGuardians?.(i).catch(()=>null);
      if (d) rows.push(`<div class="item">Deployer[${i}] → <span class="mono">${d}</span></div>`);
    }
    for (let i=0;i<7;i++){
      const a = await READ_CONTRACT.adminGuardians?.(i).catch(()=>null);
      if (a) rows.push(`<div class="item">Admin[${i}] → <span class="mono">${a}</span></div>`);
    }
    out.innerHTML = rows.length ? rows.join("") : `<div class="item">No guardian slots readable.</div>`;
    log("Guardians listed ✅","ok");
  } catch(e){ log(e.message || e, "err"); }
};

/** =========================
 * ADMIN TAB
 * ======================= */
$("btnPause").onclick = async () => {
  try{ await initWriteContract(); const tx = await WRITE_CONTRACT.pause(); log(`Pause: ${tx.hash}`); await tx.wait(); log("Paused ✅","ok"); refreshStats();
  } catch(e){ log(e.message || e, "err"); }
};
$("btnUnpause").onclick = async () => {
  try{ await initWriteContract(); const tx = await WRITE_CONTRACT.unpause(); log(`Unpause: ${tx.hash}`); await tx.wait(); log("Unpaused ✅","ok"); refreshStats();
  } catch(e){ log(e.message || e, "err"); }
};
$("btnWithdraw").onclick = async () => {
  try{
    await initWriteContract();
    const to = parseAddress($("toTreasury").value);
    const amt = parseUint($("amtTreasury").value);
    const tx = await WRITE_CONTRACT.withdrawTreasury(to, amt);
    log(`Withdraw: ${tx.hash}`); await tx.wait(); log("Treasury withdrawn ✅", "ok"); refreshStats();
  } catch(e){ log(e.message || e, "err"); }
};

/** =========================
 * VIEWS TAB (read-only)
 * ======================= */
$("btnViewPending2").onclick = async () => {
  try{
    await initReadContract();
    const col = parseAddress($("vCol").value);
    let owner = $("vOwner").value.trim();
    if (!owner) owner = USER_ADDR || "";
    const own = parseAddress(owner);
    const tid = parseUint($("vTokenId").value);
    const r = await READ_CONTRACT.pendingRewardsView(col, own, tid);
    $("pendingOut").textContent = r.toString();
    log("Pending rewards (Views) fetched ✅","ok");
  } catch(e){ log(e.message || e, "err"); }
};

/** =========================
 * RIGHT PANE: USER & COLLECTION INFO + REGISTERED COLLECTIONS
 * ======================= */
$("btnUserInfo").onclick = async () => {
  try{
    await initReadContract();
    let usr = $("infoUser").value.trim();
    if (!usr) usr = USER_ADDR || "";
    const owner = parseAddress(usr);
    const col = parseAddress($("infoCol").value);
    const tid = parseUint($("infoToken").value || "0");
    const rewards = await READ_CONTRACT.pendingRewardsView(col, owner, tid);
    $("ui_addr").textContent = owner;
    $("ui_col").textContent = col;
    $("ui_rewards").textContent = rewards.toString();
    log("User info fetched ✅","ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnColInfo").onclick = async () => {
  try{
    await initReadContract();
    const col = parseAddress($("ci_col").value);
    const idx = await READ_CONTRACT.registeredIndex(col).catch(()=>null);
    const blue = await READ_CONTRACT.isBluechipCollection(col).catch(()=>null);
    $("ci_addr").textContent = col;
    $("ci_idx").textContent = idx!=null ? idx.toString() : "—";
    $("ci_blue").textContent = (blue===true || blue===false) ? String(blue) : "—";
    log("Collection info fetched ✅","ok");
  } catch(e){ log(e.message || e, "err"); }
};

$("btnScanCollections").onclick = async () => {
  try{
    await initReadContract();
    const max = Number($("scanMax").value || "200");
    const out = $("collectionsList");
    out.innerHTML = "";
    let found = 0;
    for (let i=0;i<max;i++){
      try{
        const addr = await READ_CONTRACT.registeredCollections(i);
        if (addr && addr !== ethers.ZeroAddress) {
          found++;
          out.insertAdjacentHTML("beforeend", `<div class="item">[${i}] <span class="mono">${addr}</span></div>`);
        }
      } catch { break; }
    }
    if (!found) out.innerHTML = `<div class="item">No collections found up to index ${max-1}. Increase range if needed.</div>`;
    log(`Scanned registeredCollections(0..${max-1}) → ${found} found ✅`, "ok");
  } catch(e){ log(e.message || e, "err"); }
};
</script>
</body>
</html>
