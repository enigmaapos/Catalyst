<!doctype html>
<html lang="en">  
<head>  
  <meta charset="utf-8" />  
  <meta name="viewport" content="width=device-width,initial-scale=1" />  
  <title>Catalyst Protocol â€” DApp (Production-ready UI)</title>  
  <meta name="description" content="Catalyst Protocol dApp â€” staking, governance, council" />  
  <!-- Tailwind CDN -->  
  <script src="https://cdn.tailwindcss.com"></script>  
  <style>  
    body { background: linear-gradient(180deg,#041024 0%, #061426 100%); }  
    .glass { background: rgba(255,255,255,0.03); backdrop-filter: blur(6px); }  
  </style>  
</head>  
<body class="min-h-screen text-white font-sans">  
  <div class="max-w-6xl mx-auto p-6">  
    <header class="flex items-center justify-between mb-6">  
      <div>  
        <h1 class="text-2xl font-bold">Catalyst Protocol</h1>  
        <p class="text-sm text-slate-300">Staking Â· Governance Â· Guardian Council</p>  
      </div>  
      <div class="flex items-center gap-3">  
        <div id="networkBadge" class="px-3 py-1 rounded-md text-sm glass">Network: <span id="networkName">â€”</span></div>  
        <button id="connectBtn" class="px-4 py-2 bg-gradient-to-r from-green-500 to-cyan-400 rounded-md font-semibold text-black">Connect Wallet</button>  
        <button id="disconnectBtn" class="px-4 py-2 bg-gradient-to-r from-red-500 to-pink-400 rounded-md font-semibold text-black hidden">Disconnect</button>  
      </div>  
    </header>  

    <main class="grid grid-cols-1 md:grid-cols-3 gap-6">  
      <!-- Quick Status -->  
      <section class="glass p-4 rounded-lg">  
        <h2 class="font-semibold mb-2">Quick Status</h2>  
        <div class="space-y-2 text-sm text-slate-200">  
          <div>Connected: <strong id="addr">Not connected</strong></div>  
          <div>CATA Balance: <strong id="cataBal">â€”</strong></div>  
          <div>Staked NFTs (global): <strong id="globalStaked">â€”</strong></div>  
          <div>Roles (CATA / Staking): <small id="roles">â€”</small></div>  
        </div>  

        <hr class="my-3 border-slate-700" />  
        <div class="text-xs text-slate-300">Contract Addresses (fill & Save)</div>  
        <div class="mt-2 space-y-2">  
          <input id="addrCata" placeholder="CATA Token Address" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <input id="addrStaking" placeholder="Staking Contract Address" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <input id="addrGovernance" placeholder="Governance Contract Address" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <input id="addrCouncil" placeholder="GuardianCouncil Address" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <div class="flex gap-2">  
            <button id="saveAddrs" class="px-3 py-1 bg-slate-700 rounded text-sm">Save</button>  
            <button id="loadAddrs" class="px-3 py-1 bg-slate-700/50 rounded text-sm">Load from local</button>  
          </div>  
        </div>  
      </section>  

      <!-- Staking Actions -->  
      <section class="glass p-4 rounded-lg">  
        <h2 class="font-semibold mb-2">Staking</h2>  
        <p class="text-sm text-slate-300 mb-3">Approve NFT â†’ Term Stake or Permanent Stake â†’ Harvest / Unstake</p>  
        <div class="space-y-2 text-sm">  
          <div class="grid grid-cols-2 gap-2">  
            <input id="nftCollection" placeholder="NFT Collection Address" class="p-2 rounded bg-black/20" />  
            <input id="nftTokenId" placeholder="Token ID" class="p-2 rounded bg-black/20" />  
          </div>  
          <div class="flex gap-2">  
            <button id="approveNFT" class="flex-1 p-2 bg-yellow-500 text-black rounded">Approve Staking Contract</button>  
            <button id="termStakeBtn" class="flex-1 p-2 bg-indigo-600 rounded">Term Stake</button>  
          </div>  
          <div class="flex gap-2">  
            <button id="permApproveFee" class="flex-1 p-2 bg-amber-600 rounded">Approve Fee (CATA)</button>  
            <button id="permStakeBtn" class="flex-1 p-2 bg-emerald-600 text-black rounded">Permanent Stake</button>  
          </div>  
          <div class="flex gap-2">  
            <button id="harvestBtn" class="flex-1 p-2 bg-sky-600 rounded">Harvest</button>  
            <button id="unstakeBtn" class="flex-1 p-2 bg-red-600 rounded">Unstake</button>  
          </div>  
        </div>  

        <!-- ðŸ”¥ Advanced Batch Section -->  
        <hr class="my-3 border-slate-700" />  
        <h3 class="font-semibold mb-2">Advanced Batch Ops</h3>  
        <textarea id="batchNFTs" placeholder="collection,tokenId per line" class="w-full h-24 p-2 rounded bg-black/20 text-xs font-mono"></textarea>  
        <div class="flex gap-2 mt-2">  
          <button id="batchTermStake" class="flex-1 p-2 bg-indigo-700 rounded text-sm">Batch Term Stake</button>  
          <button id="batchPermStake" class="flex-1 p-2 bg-emerald-700 rounded text-sm">Batch Permanent Stake</button>  
        </div>  
      </section>  

      <!-- Governance & Council -->  
      <section class="glass p-4 rounded-lg">  
        <h2 class="font-semibold mb-2">Governance & Council</h2>  
        <div class="space-y-2">  
          <select id="proposalType" class="w-full p-2 rounded bg-black/20 text-sm">  
            <option value="BASE_REWARD">Base Reward</option>  
            <option value="HARVEST_FEE">Harvest Fee</option>  
            <option value="UNSTAKE_FEE">Unstake Fee</option>  
            <option value="REGISTRATION_FEE_FALLBACK">Registration Fee</option>  
          </select>  
          <input id="proposalValue" placeholder="New numeric value" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <input id="proposalCollectionCtx" placeholder="Collection address (optional)" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <div class="flex gap-2">  
            <button id="createProposal" class="flex-1 p-2 bg-violet-600 rounded">Create Proposal</button>  
            <button id="voteProposal" class="flex-1 p-2 bg-blue-600 rounded">Vote</button>  
          </div>  
          <input id="proposalId" placeholder="Proposal ID (hex)" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <div class="flex gap-2">  
            <button id="execProposal" class="flex-1 p-2 bg-green-700 rounded">Execute</button>  
            <button id="fetchProp" class="flex-1 p-2 bg-slate-600 rounded">Fetch</button>  
          </div>  
          <hr class="border-slate-700 my-2" />  
          <input id="councilBatch" placeholder="Comma-separated 7 addresses" class="w-full p-2 rounded bg-black/20 text-sm" />  
          <div class="flex gap-2">  
            <button id="proposeReseed" class="flex-1 p-2 bg-rose-600 rounded">Propose Reseed</button>  
            <button id="execReseed" class="flex-1 p-2 bg-rose-400 text-black rounded">Execute Reseed</button>  
          </div>  
        </div>  
      </section>  
    </main>  

    <section class="glass p-4 rounded-lg mt-6">  
      <h3 class="font-semibold mb-2">Advanced / Logs</h3>  
      <div id="logs" class="h-48 overflow-auto text-xs font-mono bg-black/20 p-3 rounded"></div>  
    </section>  

    <footer class="mt-6 text-xs text-slate-500">Â© Catalyst Protocol â€” Use at your own risk.</footer>  
  </div>  

  <!-- Load Ethers.js first -->  
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.min.js"></script>  

  <!-- App Logic -->  
  <script>  
  window.addEventListener("load", () => {  
    if (typeof ethers === "undefined") {  
      console.error("Ethers not loaded");  
      return;  
    }  

    // âœ… ABI URLs for 4 contracts  
    const ABI_URLS = {  
      cata: 'abi/cata.json',  
      staking: 'abi/staking.json',  
      governance: 'abi/governance.json',  
      council: 'abi/council.json'  
    };  

    const ERC721_ABI = [  
      'function approve(address to, uint256 tokenId)',  
      'function setApprovalForAll(address operator, bool approved)',  
      'function isApprovedForAll(address owner, address operator) view returns (bool)'  
    ];  

    async function loadABI(name) {  
      const res = await fetch(ABI_URLS[name]);  
      return await res.json();  
    }  

    let provider, signer, userAddr;  
    let contracts = { cata:null, staking:null, governance:null, council:null };  

    const $ = id => document.getElementById(id);  
    function log(...args){  
      const el = $('logs');  
      el.innerText = new Date().toISOString()+" â€¢ "+args.join(" ")+"\n"+el.innerText;  
    }  

    async function connect(){  
      provider = new ethers.providers.Web3Provider(window.ethereum);  
      await provider.send('eth_requestAccounts', []);  
      signer = provider.getSigner();  
      userAddr = await signer.getAddress();  
      $('addr').innerText = userAddr;  
      $('connectBtn').classList.add("hidden");  
      $('disconnectBtn').classList.remove("hidden");  
    }  

    function disconnect(){  
      provider = signer = userAddr = null;  
      contracts = { cata:null, staking:null, governance:null, council:null };  
      $('addr').innerText = "Not connected";  
      $('connectBtn').classList.remove("hidden");  
      $('disconnectBtn').classList.add("hidden");  
      log("Disconnected");  
    }  

    $('connectBtn').onclick = connect;  
    $('disconnectBtn').onclick = disconnect;  

    // ðŸ”¥ Example batch staking handler  
    $('batchTermStake').onclick = async ()=>{  
      const lines = $('batchNFTs').value.trim().split('\n');  
      for (let line of lines){  
        const [c,t] = line.split(',');  
        if(c&&t){  
          const tx = await contracts.staking.termStake(c.trim(), t.trim());  
          log("batch termStake", tx.hash);  
          await tx.wait();  
        }  
      }  
    };  

  });  
  </script>  
</body>  
</html>
