// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./ConfigRegistryLib.sol";
import "./StakingLib.sol";

library ProposalExecutorLib {
    /// @notice Execution context stored in main contract storage
    struct ExecContext {
        // proposals and their status
        mapping(bytes32 => bool) executed;
        mapping(bytes32 => address) targets;
        mapping(bytes32 => bytes) payloads;
        mapping(bytes32 => uint256) values;
    }

    /// @notice Execute a governance proposal
    /// @dev Uses `storage` instead of `memory` because mappings cannot exist in memory
    function _execute(
        ExecContext storage ctx,
        bytes32 id
    ) internal {
        require(!ctx.executed[id], "already executed");

        address target = ctx.targets[id];
        bytes memory payload = ctx.payloads[id];
        uint256 value = ctx.values[id];

        require(target != address(0), "no target");

        // mark as executed
        ctx.executed[id] = true;

        // perform call
        (bool ok, bytes memory res) = target.call{value: value}(payload);
        require(ok, string(res));
    }

    /// @notice Store a proposal execution plan
    function _storeProposal(
        ExecContext storage ctx,
        bytes32 id,
        address target,
        bytes memory payload,
        uint256 value
    ) internal {
        require(ctx.targets[id] == address(0), "proposal exists");
        ctx.targets[id] = target;
        ctx.payloads[id] = payload;
        ctx.values[id] = value;
    }

    /// @notice Check if a proposal has been executed
    function _isExecuted(
        ExecContext storage ctx,
        bytes32 id
    ) internal view returns (bool) {
        return ctx.executed[id];
    }
}
